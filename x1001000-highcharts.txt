Directory structure:
└── docs/
    ├── chart-and-series-types/
    │   ├── 3d-cylinder.md
    │   ├── angular-gauges.md
    │   ├── arc-diagram.md
    │   ├── area-chart.md
    │   ├── areaspline-chart.md
    │   ├── bar-chart.md
    │   ├── bell-curve-series.md
    │   ├── box-plot-series.md
    │   ├── bubble-series.md
    │   ├── bullet-chart.md
    │   ├── chart-types.md
    │   ├── column-chart.md
    │   ├── column-pyramid.md
    │   ├── combining-chart-types.md
    │   ├── dependency-wheel.md
    │   ├── dumbbell-series.md
    │   ├── error-bar-series.md
    │   ├── funnel-3d.md
    │   ├── funnel-series.md
    │   ├── heatmap.md
    │   ├── histogram-series.md
    │   ├── item-chart.md
    │   ├── line-chart.md
    │   ├── lollipop-series.md
    │   ├── network-graph.md
    │   ├── organization-chart.md
    │   ├── packed-bubble.md
    │   ├── parallel-coordinates-chart.md
    │   ├── pareto-chart.md
    │   ├── pictorial.md
    │   ├── pie-chart.md
    │   ├── polar-chart.md
    │   ├── pyramid-3d.md
    │   ├── radial-bar-chart.md
    │   ├── range-series.md
    │   ├── sankey-diagram.md
    │   ├── scatter-chart.md
    │   ├── spline-chart.md
    │   ├── stream-graph.md
    │   ├── sunburst-series.md
    │   ├── timeline-series.md
    │   ├── treegraph-chart.md
    │   ├── treemap.md
    │   ├── variable-radius-pie-chart.md
    │   ├── variwide-chart.md
    │   ├── vector-plot.md
    │   ├── venn-series.md
    │   ├── waterfall-series.md
    │   ├── wind-barbs-series.md
    │   ├── word-cloud-series.md
    │   └── x-range-series.md
    └── chart-concepts/
        ├── 3d-charts.md
        ├── axes.md
        ├── bubble-legend.md
        ├── dataviz-glossary.md
        ├── drilldown.md
        ├── labels-and-string-formatting.md
        ├── legend.md
        ├── plot-bands-and-plot-lines.md
        ├── responsive.md
        ├── scrollbar.md
        ├── security.md
        ├── series.md
        ├── templating.md
        ├── title-and-subtitle.md
        ├── tooltip.md
        ├── understanding-highcharts.md
        └── zooming.md

================================================
FILE: docs/chart-and-series-types/3d-cylinder.md
================================================
3D cylinder
===

A 3D cylinder chart is a variation of a 3D column chart and features cylindrical points.

Here’re both chart types to compare:

**3D cylinder chart**

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/cylinder" allow="fullscreen"></iframe>

**3D column chart**

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/css/column-3d" allow="fullscreen"></iframe>

Installation
------------

Two modules are required `highcharts-3d.js` and `cylinder.js`.

This is a 3D-only series type, so 3D needs to be [enabled](https://api.highcharts.com/highcharts/chart.options3d.enabled).

Configuration
-------------

 Configuration is the same as for the 3D column series type. To keep cylindrical shapes, with a circle as a base, radius of the base should get the smaller value of the point’s width and point’s depth.

Use Cases
---------
```js
{
    chart: {
        type: 'cylinder',
        options3d: {
            enabled: true,
            alpha: 15,
            beta: 15,
            depth: 50,
            viewDistance: 25
        }
    },
    series: [{
        data: [1, 2, 3]
    }]
}
```


API Docs
--------

Check the following [API document link](https://api.highcharts.com/highcharts/plotOptions.cylinder) to learn more about the 3D Cylinder.



================================================
FILE: docs/chart-and-series-types/angular-gauges.md
================================================
Angular gauges
==============

Angular gauges are also known as dials or speedometer-like widgets, and provide a great visualisation for dashboards. Like with polar charts, we extended the already existing series/points/axis model, and implemented the gauges as a new series type with one value axis, the yAxis. Which means that everything you learned about working dynamically and statically with other Highcharts series types, also applies to the angular gauges. 

![gauge.png](gauge.png)

One thing that is important to notice is that gauges have no x-axis. The x-axis in a gauge is completely stripped for functionality and operations on this axis, it will not be drawn on the chart.

To create an Angular gauge set chart.type to "gauge":

```js
chart: {
    type: 'gauge'
}
```

Normally there is only one point in a gauge series, but it also handles multiple point, like in our clock example with three dials. You can add as many background elements as you like to the gauge, allowing you to style it all the way from the minimal default design to heavy, 3D like works of art with shadows and reflections created with linear and radial gradients.

Solid gauges
------------

Since Highcharts 4, we also provide a second type of gauges, the `solidgauge`. It is similar to the gauge series, but has a solid color displaying the value, and responds to color setting on the Y axis, similar to the colorAxis of a map. Read more in the [API](https://api.highcharts.com/highcharts/plotOptions.solidgauge).

Gauge examples
--------------

*   [Simple gauge with rounded plot bands](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/xaxis/plotbands-gauge-borderradius)
*   [Speedometer with dual axes](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/gauge-dual)
*   [The Highcharts Clock](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/gauge-clock)
*   [VU meter](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/gauge-vu-meter)



================================================
FILE: docs/chart-and-series-types/arc-diagram.md
================================================
Arc diagram
============

The arc-diagram chart visualizes relations and their strength between nodes of a data set. In order to use it, you need to load the `modules/arc-diagram.js` module.

<iframe style="width: 100%; height: 485px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/arc-diagram" allow="fullscreen"></iframe>

Data structure
--------------

Notice the structure of the [keys](https://api.highcharts.com/highcharts/plotOptions.arcdiagram.keys) feature that links the nodes using the keyword `from` and `to`, and `weight` to represent the volume of the connection: `keys: ['from', 'to', 'weight']`. Arc diagram-specific options such as [linkWeight](https://api.highcharts.com/highcharts/plotOptions.arcdiagram.linkWeight) and [centeredLinks](https://api.highcharts.com/highcharts/plotOptions.arcdiagram.centeredLinks) are also shown in this snippet:

```js
series: [{
    keys: ['from', 'to', 'weight'],
    type: 'arcdiagram',
    name: 'Flights',
    linkWeight: 1,
    centeredLinks: true,
    data: [
        ['Bergen', 'Cracow', 1],
        ['Cracow', 'Frankfurt', 2],
        ['Bergen', 'Frankfurt', 1],
        ['Cracow', 'Chicago', 1]
    ]
}]
```

Using the [marker](https://api.highcharts.com/highcharts/plotOptions.arcdiagram.marker) option, we can shape the `symbol` of our data nodes. An example of such a configuration with the necessary options can be found in the demo below:

<iframe style="width: 100%; height: 485px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-arcdiagram/marker-symbol" allow="fullscreen"></iframe>

Another important feature to mention is the ability to rotate the chart with the `inverted` and `reversed` options:

<iframe style="width: 100%; height: 485px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-arcdiagram/inverted" allow="fullscreen"></iframe>

For more detailed samples and documentation check the [API reference](https://api.highcharts.com/highcharts/plotOptions.arcdiagram).



================================================
FILE: docs/chart-and-series-types/area-chart.md
================================================
Area chart
==========

The area chart functions the same way as a line chart only it fills the area between the line and the [threshold](https://api.highcharts.com/highcharts/plotOptions.area.threshold), which is 0 by default.

<iframe style="width: 100%; height: 520px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/area-chart" allow="fullscreen"></iframe>

For an overview of the area chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.area).


================================================
FILE: docs/chart-and-series-types/areaspline-chart.md
================================================
Areaspline chart
================

The areaspline chart is the same as area, only the line is a spline instead of straight lines.

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/areaspline" allow="fullscreen"></iframe>

For an overview of the areaspline chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.areaspline).


================================================
FILE: docs/chart-and-series-types/bar-chart.md
================================================
Bar chart
=========

The bar chart is exactly the same as a column chart only the x-axis and y-axis are switched.

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/bar-chart" allow="fullscreen"></iframe>

The bar chart have the same options as a [series](https://highcharts.com/docs/chart-concepts/series). For an overview of the bar chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.bar)

Trellis chart
-------------

The bar chart can be used as a trellis chart by drawing several bar charts in a grid. Here is an example using a HTML table with four bar charts:

![trellis.png](trellis.png)

The example can be found at [https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-bar/trellis](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-bar/trellis).


================================================
FILE: docs/chart-and-series-types/bell-curve-series.md
================================================
Bell curve
===

A bell curve series is a graphical representation of a normal (Gaussian) probability distribution. Bell curve is used to visualize the probability of occurring outcomes. The curve is bell-shaped, and its center top point is the mean of the base data.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.bellcurve)_

<iframe style="width: 100%; height: 500px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/bellcurve" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/bellcurve/) to check the code.

How to create a Bell Curve
--------------------------

The bell curve requires the following module [modules/histogram-bellcurve.js](https://code.highcharts.com/maps/modules/histogram-bellcurve.js).

The bell curve series is an areaspline series with self-setting data. Unlike most other Highcharts series, the [data](https://api.highcharts.com/highcharts/series.bellcurve) property is not available - it is set internally based on the base series data (more precisely y values of the data).

**Two steps are required to create a bell curve:**

1. Set the series `type` to `bellcurve`.

2. Set `baseSeries` to the right data series’ `id` or `index`.

```js
series: [{
    type: 'bellcurve',
    xAxis: 1,
    yAxis: 1,
    baseSeries: 1
}, {
    data: [3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4]
}]
```

Setting the Bell Curve
----------------------

A bell curve series has two additional options:

*   **intervals**: to control the length of the curve.
*   **pointsInInterval**: to control the number of points within one interval, i.e., the number of points between σn and σn+1.

The following demo visualizes four intervals for each side of the bell curve, and five points between each Nxσ:

```js
series: [{
    type: 'bellcurve',
    intervals: 4,
    pointsInInterval: 5
    ...
}]
```


<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/plotoptions/bellcurve-intervals-pointsininterval" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/bellcurve-intervals-pointsininterval) to check the code.

The black markers indicate the borders of the intervals - four intervals for each side of the curve. Within one interval there are four markers plus the border black marker. On the left side intervals are left-closed, on the right side right-closed. The interval length is the bell curve’s standard deviation.

Additionally, there is one point at the top which is the mean of the bell curve.



================================================
FILE: docs/chart-and-series-types/box-plot-series.md
================================================
Box plot series
===

A box plot is a convenient way of depicting groups of data through their five-number summaries: the smallest observation (sample minimum), lower quartile (Q1), median (Q2), upper quartile (Q3), and largest observation (sample maximum). Combined with a scatter series, the box plot may also indicate which observations, if any, might be considered outliers.

![Highcharts Box Plot](box-plot.png)

### Data format

Each point in a box plot has five values: low, q1, median, q3 and high. Highcharts recognizes three ways of defining a point:

*   Object literal. The X value is optional.  
    `{ x: Date.UTC(2013, 1, 7), low: 0, q1: 1, median: 2, q3: 3, high: 4 }`
*   Array of 5 values. The X value is inferred.  
    `[0, 1, 2, 3, 4]`
*   Array of 6 values. The X value is the first position.  
    `[Date.UTC(2013, 1, 7), 0, 1, 2, 3, 4]`

### Styling the boxes

The different parts of the box anatomy can be styled individually. The stem, whiskers and median have their own options for line width, color and dash style, while the box itself is subject to the color, lineWidth and fillColor options. See [plotOptions.boxplot](https://api.highcharts.com/highcharts/plotOptions.boxplot) for a full reference, and [the box plot styling](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/box-plot-styling/) sample for a demonstration.


================================================
FILE: docs/chart-and-series-types/bubble-series.md
================================================
Bubble series
=============

A bubble series renders bubbles, which radius are proportional to a `z` value, on given `x` and `y` positions. It is an extended form of a [scatter series](https://www.highcharts.com/docs/chart-and-series-types/scatter-chart).

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/bubble" allow="fullscreen"></iframe>

Bubble series features
----------------------

Like the scatter series, the bubble series also accepts data points with `x` and `y` values. But in addition, it accepts the third dimension, `z`, that dictates the size of the bubble. There are two modes for how the size is calculated. When [sizeBy](https://api.highcharts.com/highcharts/series.bubble.sizeBy) is `area`, the `z` value is proportional to the area, and when set to `width`, it is proportional to the diameter.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/plotoptions/bubble-sizeby" allow="fullscreen"></iframe>


Bubble sizes
------------

The actual size of the bubbles is also controlled by other options:
* The [minSize](https://api.highcharts.com/highcharts/series.bubble.minSize) and [maxSize](https://api.highcharts.com/highcharts/series.bubble.minSize) options determine the size span of the rendered bubbles. They can be set as percentages (of the chart area) or as absolute pixel values.
* The [zMin](https://api.highcharts.com/highcharts/series.bubble.zMin) and [zMax](https://api.highcharts.com/highcharts/series.bubble.zMax) options determine how the sizes should be computed relative to the actual z value.
* The [sizeByAbsoluteValue](https://api.highcharts.com/highcharts/series.bubble.sizeByAbsoluteValue) determine how the size should handle crossing of the [zThreshold](https://api.highcharts.com/highcharts/series.bubble.zThreshold), usually the zero plane.

Bubble Legend
-------------
Bubble series supports a special type of representation in the legend through the [bubble legend](https://www.highcharts.com/docs/chart-concepts/bubble-legend) module.

Symbols and shapes
------------------
In addition to the default circle shape that has given name to the bubble series, other symbols can also be used. The symbols can be predefined shapes, or images loaded by a URL.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/plotoptions/bubble-symbol" allow="fullscreen"></iframe>

Color axis
----------
While the bubble series by default renders three dimensional data through the `x`, `y` and `z` options, it is also add a fourth dimension through a custom color key. The default color key for the bubble series is `z`, but that can be changed to for example `colorValue`. In that case, a series configuration may look like this:

```js
series: [{
    colorKey: 'colorValue',
    data: [{
        x: 0,
        y: 81,
        z: 63,
        colorValue: 4
    }, {
        x: 98,
        y: 5,
        z: 89,
        colorValue: 32
    }, {
        x: 51,
        y: 50,
        z: 73,
        colorValue: 9
    }]
}]
```

In the following example, a color axis is added and the `x` value is used for color key.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/coloraxis/changed-default-color-key" allow="fullscreen"></iframe>

API Reference
-------------
For an overview of the bubble series options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.bubble).




================================================
FILE: docs/chart-and-series-types/bullet-chart.md
================================================
Bullet chart
===

A bullet graph is a variation of a bar graph. The bullet series features a single measure, compares it to a target, and displays it in the context of qualitative ranges of performance, that could be set using [plotBands](https://api.highcharts.com/highcharts/yAxis.plotBands) on yAxis.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.bullet)_

<iframe style="width: 100%; height: 349px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/bullet-graph" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/bullet-graph/) to check the code.

How to create a bullet chart
----------------------------

Bullet series requires the following module “modules/bullet.js”.

To create a bullet series, add the following configuration in the series option:

```js
{
    type : 'bullet',
    data : [{
        y : 20,     // The value of a point
        target: 50  // The target value of a point
    }],
    targetOptions: { // Options related with look and position of targets
        width: '140%',        // The width of the target
        height: 3,            // The height of the target
        borderWidth: 0,       // The border width of the target
        borderColor: 'black', // The border color of the target
        color: 'black'        // The color of the target
    }
}
```

The `targetOptions` could be set for each point to create individual target options. On point level and even on series level the `targetOptions` are optional - default options will be set. The default options values can be found in the [API reference](https://api.highcharts.com/highcharts/series.bullet).



================================================
FILE: docs/chart-and-series-types/chart-types.md
================================================
Chart types
===========

Highcharts support a range of different chart types so data can be displayed in a meaningful way. Highcharts supports a long list of different chart types, among others `line`, `spline`, `area`, `areaspline`, `column`, `bar`, `pie`, `scatter`, `gauge`, `arearange`, `areasplinerange` and `columnrange`. For the full list of available chart types, see the API for [Highcharts](https://api.highcharts.com/highcharts/plotOptions), [Highcharts Stock](https://api.highcharts.com/highstock/plotOptions), [Highcharts Maps](https://api.highcharts.com/highmaps/plotOptions) and [Highcharts Gantt](https://api.highcharts.com/gantt/plotOptions) respectively.

To set a default chart type use:

```js
chart: {
    type: 'line'
}
```

Several chart types can also be combined in one chart using the type attribute on series to set different chart types for each series:

```js
series: [{
    type: 'line'
    data: []
},{
    type: 'column'
    data: []
}]
```

See [Combining chart types](https://highcharts.com/docs/chart-and-series-types/combining-chart-types) for more information on how to combine chart types.

For more information on each chart type, see the left menu.



================================================
FILE: docs/chart-and-series-types/column-chart.md
================================================
Column chart
============

Column charts display data as vertical bars. A feature of column charts allows for different data to be compared alongside one another.
It is similar to bar charts, the difference being that bar charts have a horizontal representation of the data.

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/column-basic" allow="fullscreen"></iframe>

The column chart has the same options as a [series](https://highcharts.com/docs/chart-concepts/series). For an overview of the column chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.column).

Histogram
---------

Column charts can be used to make histogram charts by setting the padding between points and groups to 0.

```js
    plotOptions: {
        column: {
            pointPadding: 0,
            borderWidth: 0,
            groupPadding: 0,
            shadow: false
        }
    }
```

Note that borderWidth and shadows are also turned off in the example so the columns do not overlap.

Stacked Column chart
--------------------
An essential feature of column charts is to represent data as stacked columns. Read more about [stacking charts](https://www.highcharts.com/docs/advanced-chart-features/stacking-charts).

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/column-stacked" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/column-pyramid.md
================================================
Column pyramid
===

A column pyramid chart, like the column chart, is often used to visualize comparisons of data sets with discrete data, where the focus is on the values instead of categories as people read from left to right. This demo visualizes comparisons of the height of five pyramids.

Adapt the x axis to the right if the audience read from right to left, for instance, an audience from the middle east.

Here is a demo using a column pyramid series to display one pyramid per value along an X axis.

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/column-pyramid" allow="fullscreen"></iframe>

Other demos:
------------

**Stacked column pyramid**

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/plotoptions/columnpyramid-stacked" allow="fullscreen"></iframe>

**Inverted column pyramid**

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/plotoptions/columnpyramid-inverted" allow="fullscreen"></iframe>

Installation
------------

Requires `highcharts-more.js`.

To display horizontal pyramids, set `chart.inverted` to `true`.

Configuration
-------------

The code of `columnpyramid` is very simple to set, like the bar chart, as many features are already set by default such as the responsiveness, tooltip, colors, legends, etc.

Use Cases

```js
{
    chart: {
        type: 'columnpyramid'
    },
    series: [{
        data: [138.8, 136.4, 104, 101.1, 75]
    }]
}
```

API Docs
--------

Check the following [API document link](https://api.highcharts.com/highcharts/plotOptions.columnpyramid) to learn more about the column pyramid.



================================================
FILE: docs/chart-and-series-types/combining-chart-types.md
================================================
Combining chart types
=====================

To combine several chart types in one chart you only need to create series of different types:

```js
series: [{
    type: 'column',
    name: 'Jane',
    data: [3, 2, 1, 3, 4]
}, {
    type: 'column',
    name: 'John',
    data: [2, 3, 5, 7, 6]
}, {
    type: 'column',
    name: 'Joe',
    data: [4, 3, 3, 9, 0]
}, {
    type: 'spline',
    name: 'Average',
    data: [3, 2.67, 3, 6.33, 3.33]
}]
```

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/combo" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/dependency-wheel.md
================================================
Dependency wheel
===

A dependency wheel is a type of flow diagram, where nodes are laid out in a circle, and links are drawn between them. This width of the link and size of the nodes are proportional to the flow quantity or weight of each link.

The dependency wheel's use areas are similar to the [Sankey diagram](https://www.highcharts.com/docs/chart-and-series-types/sankey-diagram), but while the Sankey diagram supports multiple columns, and there is a clear direction of flow, the dependency wheel's nodes are laid out on the same level, indicating that the flow is multidirectional.

For more detailed samples and documentation, check the [API](https://api.highcharts.com/highcharts/plotOptions.dependencywheel).

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/dependency-wheel" allow="fullscreen"></iframe>

The data structure, as well as the concept of nodes and links, is identical to those of the [Sankey diagram](https://www.highcharts.com/docs/chart-and-series-types/sankey-diagram).



================================================
FILE: docs/chart-and-series-types/dumbbell-series.md
================================================
Dumbbell chart
===

A dumbbell plot can be used to visualize two different values in time, or to show the difference between two different groups or viewpoints (e.g., one dot for male and another dot for female).

The dumbbell is a variant of the [lollipop plot](https://www.highcharts.com/docs/chart-and-series-types/lollipop-series).

Getting started
---------------

Dumbbell series requires loading the Highcharts and both `highcharts-more`
and `dumbbell.js` modules.

Here is an example for loading dumbbell modules into a webpage:

```html
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/dumbbell.js"></script>
```

_The demo below represents a change in life expectancy between 1960 and 2018._
<iframe width="100%" height="600" src="https://www.highcharts.com/samples/embed/highcharts/demo/dumbbell" allow="fullscreen"></iframe>

Configuring options
-------------------

The dot can be customized by:
*   **marker** `series.marker` - marker options for the upper dot.
*   **lowMarker** `series.lowMarker` - marker options for the lower dot.

_The demo below represents using of upper and lower markers in a dumbbell chart._
<iframe width="100%" height="600" src="https://www.highcharts.com/samples/embed/highcharts/demo/dumbbell-markers" allow="fullscreen"></iframe>

Alternatively, the color of the dot can be changed via:
*   **fillColor** `series.marker.fillColor` - color for the upper dot.
*   **lowColor** `series.lowColor` - color for the lower dot.

The upper color of the dot and connector can changed via:
*   **color** `series.color`

The connector line can be customized by:
*   **connectorColor** `series.connectorColor` - color for the connector line.
*   **connectorWidth** `series.connectorWidth` - width of the connector line.



================================================
FILE: docs/chart-and-series-types/error-bar-series.md
================================================
Error bar series
================

Error bars are a graphical representation of the variability of data and are used on graphs to indicate the error, or uncertainty in a reported measurement. 

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/error-bar" allow="fullscreen"></iframe>

### Setting up the error bar series

In Highcharts, an error bar series is defined by setting the type to `errorbar`. An error bar series relates to a parent series through the option [linkedTo](https://api.highcharts.com/highcharts/plotOptions.errorbar.linkedTo). By default, the linkedTo option is ":previous", which means that the error bar series by default relates to the series defined before it in the source code. To use another series, the `linkedTo` option relates to the `id` option of the parent series.


```js
series: [{
    name: 'Rainfall',
    color: '#4572A7',
    type: 'column',
    data: [
        49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1,
        95.6, 54.4
    ]
}, {
    name: 'Rainfall error',
    type: 'errorbar',
    data: [[48, 51], [68, 73], [92, 110], [128, 136], [140, 150], [171, 179], [135, 143], [142, 149], [204, 220], [189, 199], [95, 110], [52, 56]]
}]
```

### Styling the error bars

The different parts of the error bar anatomy can be styled individually. In a non-inverted chart, the _stem_ is the vertical bar in the center, while the _whiskers_ are the top and bottom lines marking the values. The [lineWidth](https://api.highcharts.com/highcharts/plotOptions.errorbar.lineWidth) option sets the line thickness globally. The [whiskerWidth](https://api.highcharts.com/highcharts/plotOptions.errorbar.whiskerWidth) and [stemWidth](https://api.highcharts.com/highcharts/plotOptions.errorbar.stemWidth) options sets the width of the whiskers and the stem individually. For the full set of options, see [plotOptions.errorbar](https://api.highcharts.com/highcharts/plotOptions.errorbar).



================================================
FILE: docs/chart-and-series-types/funnel-3d.md
================================================
3D funnel
===

Funnel 3D series type is the 3D variant of the [Funnel Chart](https://www.highcharts.com/docs/chart-and-series-types/funnel-series). Funnel Chart is mostly used to display the different stages in the sales process with having qualified leads on the top and closed deals at the bottom. A business is bound to lose a number of potential deals for each phase in the sales process, and that is why a typical funnel has a high number of leads at the top where the funnel narrows as more clients drop off. Funnel Chart is used to see how effective a sales team can turn leads into closed deals.

<iframe style="width: 100%; height: 532px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/funnel3d" allow="fullscreen"></iframe>

Setting up
----------

The Funnel 3D chart requires `highcharts.js` to be loaded first and after that, load successively `highcharts-3d.js`, `modules/cylinder.js`, `modules/funnel3d.js`.

The 3D perspective is enabled by setting `options3d.enabled` to [true](https://api.highcharts.com/highcharts/chart.options3d.enabled). Set the chart type or the data series type to `funnel3d` ([API](https://api.highcharts.com/highcharts/chart.type)) or in [series options](https://api.highcharts.com/highcharts/series.funnel3d.type).

Configuration options
---------------------

Each segment of the 3D Funnel has a height that relates to the data point’s value. In addition, the neck's size can be set by the `neckWidth` and `neckHeight` options.

The size of the funnel fills the plot area by default, but can be configured by setting the `width` and `height` properties.

See the [API](https://api.highcharts.com/highcharts/plotOptions.funnel3d) for all other options related to the Funnel 3D Chart.



================================================
FILE: docs/chart-and-series-types/funnel-series.md
================================================
Funnel series
=============

[See live demo](https://highcharts.com/demo/funnel).

Funnel charts are a type of chart often used to visualize stages in a sales project, where the top are the initial stages with the most clients. The funnel narrows as more clients drop off. 

![funnel.png](funnel.png)

### Requirements

In order for funnel series to run, the `modules/funnel.js` file must be loaded after `highcharts.js`.

### Setting the funnel size

Each element of the funnel has a height that relates to the value. The size of the funnel by default fills the plot area, and can be overridden by width and height settings. In addition, the neck's size can be set by the [neckWidth](https://api.highcharts.com/highcharts/plotOptions.funnel.neckWidth) and [neckHeight](https://api.highcharts.com/highcharts/plotOptions.funnel.neckHeight) options. For the full set of options related to the funnel chart type, see [plotOptions.funnel](https://api.highcharts.com/highcharts/plotOptions.funnel) in the API reference.


================================================
FILE: docs/chart-and-series-types/heatmap.md
================================================
Heatmap
===

A heat map is a graphical representation of data where the individual values contained in a matrix are represented as colors.

<iframe style="width: 100%; border: none; height: 500px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/heatmap" allow="fullscreen"></iframe>

### Setting up the heat map series

Heat maps require the [modules/heatmap.js](https://code.highcharts.com/modules/heatmap.js) file to be loaded.

The heat map series is defined by setting the type to `heatmap`. A heat map has an X and Y axis like any cartesian series. The point definitions however, take three values, `x`, `y` as well as `value`, which serves as the value for color coding the point. These values can also be given as an array of three numbers.

### The color axis

Heat maps borrow a central concept from Highcharts Maps, the color axis. See the docs article on [color axis](https://highcharts.com/docs/maps/color-axis/) for details

### Interpolation

Heat maps have an [interpolation feature](https://api.highcharts.com/highcharts/plotOptions.heatmap.interpolation), which allows for displaying seamlessly transitioning data points. Check out the featured demo [here](https://highcharts.com/demo/highcharts/heatmap-interpolation).

### Resources

See the featured demos at [Heat map](https://highcharts.com/demo/heatmap/) and [Large heatmap](https://highcharts.com/demo/heatmap-canvas/). The latter demonstrates how a HTML5 canvas can be plugged in to optimize rendering times.

See [heatmap](https://api.highcharts.com/highmaps/plotOptions.heatmap) in the Highcharts Maps docs.



================================================
FILE: docs/chart-and-series-types/histogram-series.md
================================================
Histogram
===

A histogram series is a graphical representation of the data distribution. Histogram creates intervals (bins) and counts how many values fall into each bin.

_For more detailed samples and documentation check the [API](https://api.highcharts.com/highcharts/plotOptions.histogram)._

<iframe style="width: 100%; height: 432px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/histogram" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/histogram/) to check the code.

How to create a Histogram
-------------------------

The histogram requires the following module [modules/histogram-bellcurve.js](https://code.highcharts.com/modules/histogram-bellcurve.js).

The histogram series is a column series with no padding between the columns and with self-setting data. Unlike most other Highcharts series, the [data](https://api.highcharts.com/highcharts/series.histogram) property is not available - it is set internally based on the base series data (more precisely y values of the data).

Two steps are required to create an Histogram chart:

1. Set the series type to histogram 2. Set baseSeries to the right data series’ id or index.

```js
series: [{
    type: histogram,
    xAxis: 1,
    yAxis: 1,
    baseSeries: 1
}, {
    data: [3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4]
}]
```


Histogram chart specific options
--------------------------------

A histogram series has two additional options:

*   **binsNumber**: to suggest how many bins the histogram should create. `binsNumber` can be a number or a function which returns a number or one of the string: `square-root`, `sturges` or `rice`.
*   **binWidth**: to control the width of each bin. `binWidth` takes precedence over `binsNumber`.

For the full set of options, [see the API](https://api.highcharts.com/highcharts/plotOptions.histogram).

Histogram using pre-aggregated data
-----------------------------------

A histogram chart can also be created using a column chart if the data is already pre-aggregated.
Use the following setting to set up a histogram chart with a column chart:

```js
plotOptions: {
    column: {
        pointPadding: 0,
        borderWidth: 0,
        groupPadding: 0,
        shadow: false
    }
}
```

<iframe width="100%" height="470" style="null" src="https://www.highcharts.com/samples/embed/highcharts/series-histogram/column" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/item-chart.md
================================================
Item chart
===

An item chart in Highcharts is a series type where the values are represented as individual dots or symbols, so that for example a quantity of ten is represented by ten dots. This is similar to a dot chart, except that in the dot chart, the items are rendered on X and Y axis, while in the item chart, they are laid out sequentially.

The item chart is used for infographics, typically for a low number of individual items within a low number of groups. The most common use case is a parliament, and other use cases may be the distribution of a feature within a group of persons, or percentages represented by a count rather than a scalar value.

<iframe style="width: 100%; height: 760px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-item/dynamic" allow="fullscreen"></iframe>

Circular layout
---------------

Item charts can be laid out either as a rectangle or a circle. The circular layout is enabled by setting a [startAngle](https://api.highcharts.com/highcharts/plotOptions.item.startAngle) and an [endAngle](https://api.highcharts.com/highcharts/plotOptions.item.endAngle). To achieve the typical parliament hemisphere, set the `startAngle` to -100 and the `endAngle` to 100. Then, as the default center is in the middle of the plot area and the default size is that the full circle will fill out the plot area, we can adjust the `size` and `center`. These options provide a reasonable fit for the parliament:


    // Circular options
    center: ['50%', '88%'],
    size: '170%',
    startAngle: -100,
    endAngle: 100

Also part of the circular layout is the [innerSize](https://api.highcharts.com/highcharts/plotOptions.item.innerSize) and [rows](https://api.highcharts.com/highcharts/plotOptions.item.rows) settings. If the `innerSize` is 0, the circle will be filled with dots, while in the typical parliament view we would like the center of the semi-circle to be clear. So the default `innerSize` is 40%. In some cases we also want to set a fixed number of rows in order to reflect the real-world parliament. In this case we can set the `rows` option, which will take precedence over the `innerSize`.

Rectangular layout
------------------

When the angles are not given, the layout will be rectangular, and the [layout](https://api.highcharts.com/highcharts/plotOptions.item.layout) option can be set either to `horizontal` or `vertical`.

Symbols
-------

When used as an infographic, we would typically use custom symbols to denote the type of data, for example a count of men vs women. This is done in the [marker](https://api.highcharts.com/highcharts/plotOptions.item.marker.symbol) options. See the [live demo at jsFiddle](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-item/symbols).

API options
-----------

For the full set of available options, see the [API](https://api.highcharts.com/highcharts/plotOptions.item).



================================================
FILE: docs/chart-and-series-types/line-chart.md
================================================
Line chart
==========

The line chart is represented by a series of datapoints connected with a straight line. Line charts are most often used to visualize data that changes over time.

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/line-chart" allow="fullscreen"></iframe>

Line chart features
===================

The line chart inherit the options a [series](https://highcharts.com/docs/chart-concepts/series) has plus some more. See the [API reference](https://api.highcharts.com/highcharts/plotOptions.line) for a full list of the line chart plotOptions.

Most options set in plotOptions can also be set on a individual series.

Step
----

Allows the use of steps instead of a straight line.

![step_demo.png](step_demo.png)

[Try it here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/line-step/)

Code to enable step:

```js
plotOptions: {
    series: {
        step: 'left' // or 'center' or 'right'
    }
}
```



================================================
FILE: docs/chart-and-series-types/lollipop-series.md
================================================
Lollipop chart
===

A lollipop plot is basically a bar plot, but with `line` and a `dot` instead of a bar. It shows the relationship between a category and a value. On the Y axis, the value is represented by the `center of a dot` - not by the top/bottom edge (or right/left for inverted chart) what is commonly mistaken.

Using the Lollipop series is useful when you have several bars of the same height, especially when the values are ~90% of range - it avoids the Moiré effect and the chart is not such visually aggressive.

Getting started
---------------

Lollipop series requires loading the Highcharts and all `highcharts-more`, `dumbbell.js` and `lollipop.js` modules.

Here is an example for loading lollipop modules into a webpage:

```html
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/dumbbell.js"></script>
<script src="https://code.highcharts.com/modules/lollipop.js"></script>
```

_The demo below represents a simple lollipop plot_

<iframe width="100%" height="470" style="null" src="https://www.highcharts.com/samples/embed/highcharts/demo/lollipop" allow="fullscreen"></iframe>

Vertical lollipop chart
-----------------------

To display a vertical lollipops, set `chart.inverted` to `true`.

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-lollipop/inverted-lollipop" allow="fullscreen"></iframe>

Configuring options
-------------------

The dot can be customized as every other marker in Highcharts, among the others:
*   **fillColor** `series.marker.fillColor` - color for the dot.
*   **radius** `series.marker.radius` - size of the dot.

The connector line can be customized by:
*   **connectorColor** `series.connectorColor` - color for the connector line.
*   **connectorWidth** `series.connectorWidth` - width of the connector line.


================================================
FILE: docs/chart-and-series-types/network-graph.md
================================================
Network graph
===

Network graph (force directed graph) is a mathematical structure (graph) to show relations between points in an aesthetically-pleasing way. The graph visualizes how subjects are interconnected with each other. Entities are displayed as nodes and the relationship between them are displayed with lines. The graph is force directed by assigning a weight (force) from the node edges and the other interconnected nodes get assigned a weighted factor. The graph simulates the weight as forces in a physical system, where the forces have impact on the nodes and find the best position on the chart’s plotting area. The Network Graph has various use case such as display relations between people, roads, companies, and products.

Getting started
---------------

Add `modules/networkgraph.js` after you have included Highcharts.

_Example of loading both files in a webpage_

```html
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/networkgraph.js"></script>
```

Data format
-----------

The Network Graph needs a data format that builds up an array of links, where each link is specified by a `start` and an `end` node.

```js
series: [{
    data: [
        {from: 'A', to: 'B'},
        {from: 'A', to: 'C'},
        {from: 'A', to: 'D'},
        {from: 'A', to: 'E'},
        {from: 'A', to: 'F'},
        {from: 'A', to: 'G'},

        {from: 'B', to: 'C'},
        ...
    ]
}]
```


_See simple Network Graph demo_

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/initial-positions" allow="fullscreen"></iframe>

> _See a Network Graph with a more complex data structure. Notice: You don't have to specify the `from:` and `to:` property for each point when you define the `keys:` option for `plotOptions.networkgraph.keys`_

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/network-graph" allow="fullscreen"></iframe>

Algorithm options
-----------------

Forces and the algorithm are configured using `series.layoutAlgorithm` options:

*   **attractiveForce** `series.layoutAlgorithm.attractiveForce` - function that returns the force between two connected nodes.
*   **enableSimulation** `series.layoutAlgorithm.enableSimulation` - enables/disables simulation.
*   **friction** `series.layoutAlgorithm.friction` - friction to show smooth animation of nodes translations.
*   **gravitationalConstant** `series.layoutAlgorithm.gravitationalConstant` - constant for barycenter forces applied on nodes.
*   **maxIterations** `series.layoutAlgorithm.maxIterations` - max number of iterations that algorithm will be running.
*   **initialPositions** `series.layoutAlgorithm.initialPositions` - algorithm for initial placement of nodes (can be one of predefined or a custom function).
*   **repulsiveForce** `series.layoutAlgorithm.repulsiveForce` - function that returns the force between two nodes.
*   **type** `series.layoutAlgorithm.type` - only `reingold-fruchterman` available at this moment.

Since version 7.1 additional configuration options are available:

*   **approximation** - when rendering a huge number of nodes, recommended to approximate repulsive forces to decrease complexity from O(N^2) to O(N log N).
*   **theta** - used in Barnes-Hut approximation to determine when the force on nodes should be approximated or calculated directly.
*   **integration** - forces integration type. Changes how force is applied on nodes changing the animation too. Note that different integrations have different default `attractiveForce` and `repulsiveForce` options.
*   **maxSpeed** - max speed that node can have in one iteration, preventing small and disconnected nodes to run too fast. Verlet integration only

_See the demo below, for a network graph with custom algorithm options applied_

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/forces" allow="fullscreen"></iframe>

Link configuration options
--------------------------

*   **link** `series.link` - style options for links/connections (`link.width`, `link.color` and `link.dashStyle`).
*   **draggable** `series.draggable` - enables/disables drag&drop for nodes.

Node Configuration Options
--------------------------

Nodes are generated automatically from `series.data` connections. Nodes are instances of [Highcharts.Point](https://api.highcharts.com/class-reference/Highcharts.Point) and are available from the `series.nodes` array.

In addition to auto-generated properties, custom properties such as `color` or `colorIndex` can be set by adding an array, `series.nodes`, to the series options and linking nodes by `id`. For example: [data-option](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-networkgraph/data-options/)

Datalabels Options
------------------

Since v7.1 dataLabels are available for both, nodes and links, list of new options:

*   **linkFormat** `dataLabels.linkFormat` - format for the dataLabels on links (string).
*   **linkFormatter** `dataLabels.linkFormatter` - formatter for the dataLabels on links (function).
*   **linkTextPath** `dataLabels.linkTextPath` - options for the dataLabels on link if text should be rendered along the link.
*   **textPath** `dataLabels.textPath` - options for the dataLabels on node if text should be rendered around the node.

Use Cases
---------

### Use Case 1

Simple example

```js
{
    chart: {
        type: 'networkgraph'
    },
    series: [{
        data: [
            ['A', 'B'],
            ['B', 'C'],
            ['C', 'A']
        ]
    }]
}
```

Customized length between points and colored links:

```js
{
    chart: {
        type: 'networkgraph'
    },
    plotOptions: {
        networkgraph: {
            layoutAlgorithm: {
                linkLength: 50 // in pixels
            },
            link: {
                color: 'red'
            }
        }
    },
    series: [{
        data: [
            ['A', 'B'],
            ['B', 'C'],
            ['C', 'A']
        ]
    }]
}
```

_See the demo below for a network graph with customized styled links per data series._

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/styled-links" allow="fullscreen"></iframe>

### Use Case 2

Comparison of both integrations, Euler and Verlet:

<iframe style="width: 100%; height: 515px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/integration-comparison" allow="fullscreen"></iframe>

### Use Case 3

dataLabels around the nodes:

<iframe style="width: 100%; height: 565px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/textpath-datalabels" allow="fullscreen"></iframe>

### Use Case 4

dataLabels on links:

<iframe style="width: 100%; height: 565px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-networkgraph/link-datalabels" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/organization-chart.md
================================================
Organization chart
===

An organization chart (org chart) is a diagram that portrays the structure of an organization and the relationships and relative ranks of its parts and positions.

<iframe style="width: 100%; height: 700px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/organization-chart" allow="fullscreen"></iframe>

Options structure
-----------------

In Highcharts, the organization chart resembles the sankey chart in the way it is built `around nodes and links`. The nodes of an org chart are the positions or persons, while the links are the lines showing the relations between them. The `data` structure of the options defines the links.

In the `nodes` array of the series, each node is identified by an `id` referring to the id in the link. Additional properties like `title`, `description` and `image` may be set in the individual node options.

Data labels
-----------

Each person or position is represented by a card or label. This card is actually the node's data label, and is subject to the [dataLabel options](https://api.highcharts.com/highcharts/plotOptions.organization.dataLabels) of the series. In org charts, the dataLabel's `useHTML` option is set to true by default, because we want to leverage layout capabilities that are more complicated to achieve using SVG alone.

The actual HTML rendered inside the chart is determined by `dataLabels.nodeFormat` or `dataLabels.nodeFormatter`. The default `nodeFormatter` output depends on whether there is an `image` setting on the node, and produces a layout based on flex boxes in order to get positioning and alignment right. See the [example of overriding the nodeFormatter](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-organization/datalabels-nodeformatter/).

Levels
------

In an org chart typically, we may want to define specific styling for all nodes on a specific level, for example having all C-level positions in the same color. For this, we can use the [[levels option](https://api.highcharts.com/highcharts/plotOptions.organization.levels) and set the properties there. An example can be seen in the main demo above.

API options
-----------

For the full set of available options, [see the API](https://api.highcharts.com/highcharts/series.organization).



================================================
FILE: docs/chart-and-series-types/packed-bubble.md
================================================
Packed bubble
===

A bubble chart requires three dimensions of data; the x-value and y-value to position the bubble along the value axes and a third value for its volume. Packed Bubble charts have a simpler data structure, a flat, one-dimensional array with volumes is sufficient. The bubble’s x/y position is automatically calculated using an algorithm that packs the bubbles in a cluster. The series data point configuration has support for setting colors and label values. Drag’n drop feature was also added to give the user a chance to quickly move one bubble between series and then check how their relations will change.

Get started
-----------

Packed Bubble chart are part of the [highcharts-more](https://code.highcharts.com/highcharts-more.js) package, make sure this is loaded in your webpage or added as a dependency to your project. The `chart.type()` property of this chart is set with `packedbubble`.

The configuration of `packedbubble` differs little from other series types like scatter and bubble charts, and many other settings have defaults for responsiveness, tooltip, colors, legends, etc. A few lines of code are needed to get started with Packed Bubble.

Here is an [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/blog/packed-bubble-basic) of a packed bubble chart in its simplest form:

```js
Highcharts.chart('container', {
    chart: {
        type: 'packedbubble'
    },
    series: [{
        data: [50, 12, 33, 45, 60] // sizes of the bubble
    }]
});
```

Data format
-----------

In the above example, the series data for Packed Bubble takes a one-dimensional array of values, but can also take data point properties for `color()` and `name()`.

Here is an example of how to set the data for a packed bubble with 3 series and different data formats:

```js
Highcharts.chart('container', {
    chart: {
        type: 'packedbubble',
    },
    series: [{
        name: 'Coffee', // Coffee series
        data: [{
            // name property is used for the datalabel
            // value property is used for the volume of the bubble
            value: 12,
            name: 'Bert'
        }, {
            value: 5,
            name: 'John'
        }, {
            value: 10,
            name: 'Sandra'
        }, {
            value: 7,
            name: 'Cecile'
        }]
    }, {
        name: 'Energy drinks', // Energy drinks series
        data: [{
            value: 10,
            name: 'Tristan'
        }]
    }, {
        name: 'Tea', // Tea series
        data: [5, 6, 8, {
            value: 10,
            name: 'Mustapha',
            color: 'pink'
        }]
    }]
});
```

Notice in the code above, that the Tea data series is set with one dimensional array, except for the last point, which is set with values for volume, name and a color.

<iframe width="100%" height="710" style="null" src="https://www.highcharts.com/samples/embed/highcharts/blog/packed-bubble-simple-demo" allow="fullscreen"></iframe>

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/packed-bubble" allow="fullscreen"></iframe>

Bubble sizes
------------

Packed Bubble charts with a dataset of either many small or large values need some tweaking of the options to control the size of the bubbles displayed. The minimum and maximum size of bubbles is configured by two parameters: minSize and maxSize Bubbles will automatically size between the minSize and maxSize to reflect the volume of each bubble. Can be either pixels (when no unit is given), or a percentage of the smallest one of the plot width and height.

Here is an example of setting min and max size for bubbles:

```js
Highcharts.chart('container', {
    chart: {
        type: 'packedbubble'
    },
    plotOptions: {
        packedbubble: {
            minSize: 15,
            maxSize: 300
        }
    },
    series: [{
        data: [1, 75, 112, 180, 20, 3000]
    }]
});
```

<iframe width="100%" height="500" style="null" src="https://www.highcharts.com/samples/embed/highcharts/blog/packed-bubble-basic" allow="fullscreen"></iframe>

----------------------------------------------

### ALGORITHMS

The layout algorithm is configured using [series.layoutAlgorithm](https://api.highcharts.com/highcharts/series.packedbubble.layoutAlgorithm) options when the `useSimulation` param is enabled.

The `series.layoutAlgorithm` are includes options to change the speed, padding, initial bubbles positions and more.

```js
layoutAlgorithm: {
    gravitationalConstant: 0.05,
    splitSeries: true,
    seriesInteraction: false,
    dragBetweenSeries: true,
    parentNodeLimit: true
}
```

### SPLIT

Whether to split series into individual groups or to mix all series together.


```js
plotOptions: {
    packedbubble: {
        layoutAlgorithm: {
            splitSeries: true
        }
    }
}
```

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/packed-bubble-split" allow="fullscreen"></iframe>

### SIMULATION

[The simulation](https://api.highcharts.com/highcharts/series.packedbubble.useSimulation) can be disabled or enabled, which has an influence on adding options to the series graph based on the used layout. All parameters reflect in both animation and the final position of bubbles.

```js
plotOptions: {
    packedbubble: {
        useSimulation: true
    }
}
plotOptions: {
    packedbubble: {
        useSimulation: false
    }
}
```

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-packedbubble/spiral" allow="fullscreen"></iframe>

### DRAG AND DROP

Flag to determine if nodes are draggable or not. Available for graph with useSimulation set to true only.

```js
plotOptions: {
    packedbubble: {
        Draggable: true
    }
}
```

The option [dragBetweenSeries: true](https://api.highcharts.com/highcharts/series.packedbubble.layoutAlgoritm.dragBetweenSeries) is declared in layoutAlgorithm params and allows the user to drag and drop points between series, for changing point related series.

```js
layoutAlgorithm: {
    splitSeries: true,
    dragBetweenSeries: true
}
```

Use Cases
---------

### Use Case 1

1. Force-approach algorithm.

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/packed-bubble" allow="fullscreen"></iframe>

2. Configuration

```js
plotOptions: {
    packedbubble: {
        useSimulation: true,
        layoutAlgorithm: {
            splitSeries: false
        }
    }
}
```

### Use Case 2

1. Force-approach algorithm with split series.

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/packed-bubble-split" allow="fullscreen"></iframe>

2. Configuration:

```js
plotOptions: {
    packedbubble: {
        useSimulation: true,
        layoutAlgorithm: {
            splitSeries: true,
            seriesInteraction: false,
            dragBetweenSeries: true,
            parentNodeLimit: true
        }
    }
}
```

### Use Case 3

1. 7.0. Spiral packing - simple, fast alternative of the packed bubble, that may be used for more complicated data sets:

<iframe style="width: 100%; height: 860px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-packedbubble/spiral" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/parallel-coordinates-chart.md
================================================
Parallel coordinates
===

In cartesian charting, it is easy to show the relations between two or three dimensions. For example, scatter charts visualize the relationship between X and Y, 3D scatter charts visualize the relationships between three variables, where bubble charts show the relationship between up to four variables X, Y, Z (radius) and C (color).

Visualizing relationships with more than four dimensions become challenging with conventional charts, as they support only three dimensions. However, parallel coordinates chart can include many dimensions thanks to its capability to add many axes on one chart. Each axis is a separate series in the parallel coordinates chart, that means “line” or “spline” series can easily be added in any series. Highcharts will create all necessary yAxes, when creating chart according to the points in series.

<iframe style="width: 100%; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/parallel-coordinates" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/parallel-coordinates/) to check the code.

How to create parallel coordinates chart
----------------------------------------

Parallel coordinates chart requires the following module [modules/parallel-coordinates.js](https://code.highcharts.com/modules/parallel-coordinates.js).

Here are the steps to create a parallel coordinates chart:

1. set `chart.parallelCoordinates` to `true`:

```js
chart: {
  parallelCoordinates: true
}
```


2. Highcharts generates all necessary yAxes according to the dataset, and `xAxis.categories` includes the yAxes’ titles:

```js
xAxis: {
  categories: ['Title 1', 'Title 2', 'Title 3', ... , 'Title N'],
  labels: {
    styles: {
      color: '#DFDFDF' // changes titles colors
    }
  }
}
```

3. Each yAxis can be customized separately:

```js
yAxis: [{
  lineWidth: 2
}, {
  tickInterval: 10
},
  ...
]
```

4. Use `chart.parallelAxes` to set general configurations to all yAxis such as `lineWidth`, `lineColor`, etc.


```js
chart: {
  parallelAxes: {
    tickAmount: 10 // all non-categorized axes will have exactly ten ticks
  }
}
```

Keep in mind that `yAxis: [ ... ]` options have higher priority than `chart.parallelAxes`.

Parallel coordinates chart specific options
-------------------------------------------

*   **chart.parallelCoordinates**: Enable this option to create Parallel Coordinates Chart.
*   **chart.parallelAxes**: This option is used to configure all yAxis at once.
*   **yAxis.tooltipValueFormat**: Use this option to personalize the tooltip for point.y and available in [tooltip.pointFormat](https://api.highcharts.com/highcharts/tooltip.pointFormat) as `{point.formattedValue}`.



================================================
FILE: docs/chart-and-series-types/pareto-chart.md
================================================
Pareto chart
===

The pareto chart is used to graphically summarize and display the relative importance of the differences between groups of data. It suggests that 80% of problems can be traced to as few as 20% of root causes.

The Pareto series is represented by a line series of datapoints extracted from a base series, which is typically a column type. Calculated values are from the range: 0% - 100% and should be assigned to additional yAxis.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.pareto)_

<iframe style="width: 100%; height: 432px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/pareto" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/pareto/) to check the code.

How to create Pareto Chart
--------------------------

Pareto chart requires the following module [modules/parallel-coordinates.js](https://code.highcharts.com/modules/parallel-coordinates.js).

Here are the steps to create a Pareto chart:

1. Set an additional yAxis, which is assigned only to Pareto series, and visualize points from 0-100% range. As a result the main data and pareto series are transparent.

```js
yAxis: [{
        // main yAxis
}, {
    title: {
        text: 'Pareto'
    },
    minPadding: 0,
    maxPadding: 0,
    opposite: true,
    labels: {
        format: '{value}%'
    }
}]
```

For more details about yAxis click on the following [link](https://api.highcharts.com/highcharts/yAxis).

2. Set a column series (sorted by y descending). Points are data source for the Pareto series.

```js
{
    type: 'column',
    data: [115, 75, 60, 55, 45, 30, 20]
}
```


3. Add a pareto series with an baseSeries parameter and yAxis index.

```js
series: [{
    type: 'pareto',
    yAxis: 1, // number of declared yAxis
    zIndex: 10,
    baseSeries: 1 // index of column series
}, {
    type: 'column',
    zIndex: 2,
        data: [755, 222, 151, 86, 72, 51, 36, 10]
    }
]
```

Keep in mind that Highcharts will generate all necessary data points following its algorithm.

Keep in mind that `yAxis: [ … ]` options have higher priority than `chart.parallelAxes`.

Pareto chart options
--------------------

*   **baseSeries**: Index of a specific column series.
*   **yAxis** : Index of Pareto yAxis



================================================
FILE: docs/chart-and-series-types/pictorial.md
================================================
Pictorial series
===============

The Pictorial series is a type of chart that uses vector images to visualize data. It is a great way to illustrate complex concepts in a simple and easy to understand way.

<iframe style="width: 100%; height: 520px; border: none;" src="https://highcharts.com/samples/embed/highcharts/demo/pictorial" allow="fullscreen"></iframe>

Setting the Pictorial Chart Series
----------------------------------

The pictorial series requires the [modules/pictorial.js](https://code.highcharts.com/modules/pictorial.js) file to be loaded.

Here is an example of loading the pictorial module into a webpage:

```html
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/pictorial.js"></script>
```

In order to set the default series type to `pictorial`, set the `chart.type`:

```js
chart: {
    type: 'pictorial'
}
```

The next step is to add an image. Use the [paths.definition](https://api.highcharts.com/highcharts/series.pictorial.paths.definition) option for this purpose. The image needs to be specified as an SVG path and properly cropped to maintain the correct proportions and alignment. Make sure the SVG aligns with the coordinates (0, 0) on both the x and y axes within the `viewBox`. You can use free tools like [svg-path-editor](https://github.com/Yqnn/svg-path-editor) or Inkscape for this. Take notice that an image corresponds to one series, not to one point.

As you can see in the following example, [series.stacking](https://api.highcharts.com/highcharts/series.pictorial.stacking) is also used. To understand how the Pictorial series works, think of a column series. If there are multiple series, the columns are grouped next to each other, but when they are [stacked](https://api.highcharts.com/highcharts/series.column.stacking), they form one column made up of these series. By analogy with this, you can imagine a column as an image, which is composed of several series to create one shape. Depending on your requirements, it can be used with `percent` or `normal` stacking.

```js
  plotOptions: {
    series: {
      stacking: 'percent',
      paths: [{
        definition: 'M480.15 0.510986V0.531986C316.002 0.531986 197.223 56.655 119.105 139.78C40.987 222.905 3.50699 332.801 0.884992 440.062C-1.74001 547.459 36.194 644.769 79.287 725.354C122.38 805.938 170.742 870.203 188.861 909.922C205.994 947.479 203.626 990.232 206.788 1033.17C209.95 1076.11 219.126 1119.48 260.261 1156.26C260.888 1156.83 261.679 1157.18 262.52 1157.27C262.639 1157.28 262.75 1157.28 262.87 1157.29L262.747 1173.69L274.021 1200.24C275.812 1214.45 275.053 1222.2 273.364 1229.45C261.44 1238.59 250.866 1253.57 283.323 1261.97V1283.88C249.425 1299.28 261.103 1315.14 283.323 1327.03L281.331 1342.96C249.673 1354.72 261.6 1377.5 282.645 1388.76V1403.36C256.094 1414.86 256.771 1436.12 283.323 1451.16V1473.73L349.035 1535.46L396.163 1582.58L397.498 1600.51H565.433V1585.91L619.193 1535.46C631.786 1531.75 660.881 1505.66 698.191 1468.41L702.729 1451.49L686.753 1440.38L687.226 1426.38C714.969 1420.61 718.256 1388.06 687.226 1382.78V1366.87C725.039 1359.03 715.965 1331.13 690.532 1325.04V1311.77C735.92 1292.94 715.774 1272.19 695.193 1267.29V1245.38C721.584 1240.94 721.209 1210.5 702.688 1201.19L711.107 1183.45L711.682 1162.54C713.198 1162.5 714.725 1162.46 716.241 1162.38C717.056 1162.36 717.845 1162.09 718.5 1161.6C754.295 1134.83 762.81 1094.37 765.299 1051.47C767.789 1008.58 764.577 962.629 775.69 923.173C788.878 876.344 833.216 822.264 875.654 750.885C918.093 679.505 958.46 590.459 963.133 472.719C967.812 354.836 929.374 236.776 848.507 148.143C767.638 59.511 644.344 0.516987 480.15 0.516987V0.510986Z'
      }]
    }
  },
```

The data structure is usually presented as several series that when they are stacked, create one shape.

```js
  plotOptions: {
    pictorial: {
      stacking: 'normal'
    }
  },
  series: [{
      name: 'Daylight',
      data: [6500]
    }, {
      name: 'Moonlight',
      data: [4000]
    },
    {
      name: 'Morning/Evening Sun',
      data: [3500]
    },
    {
      name: 'Lightbulb',
      data: [3000]
    },
    {
      name: 'Sunrise/sunset',
      data: [2500]
    },
    {
      name: 'Candle flame',
      data: [1800]
    }
  ]
```

In the case of `normal` stacking, the shape is sometimes not completely filled with data. It is possible to set a background shape by enabling the [yAxis.stackShadow](https://api.highcharts.com/highcharts/series.pictorial.yAxis.stackShadow) option. It is fully customizable, so it can be set as a fill [color](https://api.highcharts.com/highcharts/series.pictorial.yAxis.stackShadow.color) or even [border](https://api.highcharts.com/highcharts/series.pictorial.yAxis.stackShadow.borderWidth).

```js
  yAxis: {
    stackShadow: {
      enabled: true,
      ...
    }
  },
```

<iframe style="width: 100%; height: 520px; border: none;" src="https://highcharts.com/samples/embed/highcharts/demo/pictorial-stackshadow" allow="fullscreen"></iframe>

When stacking is not enabled, the series duplicate the image. This can be useful for comparing data within one series. The [paths.max](https://api.highcharts.com/highcharts/series.pictorial.paths.max) option determines the height of the image. It is the ratio of `yAxis.max` to the `paths.max`.

```js
    plotOptions: {
        series: {
            paths: [{
                max: 1,
                ...
            }]
        }
    }
```

<iframe style="width: 100%; height: 520px; border: none;" src="https://highcharts.com/samples/embed/highcharts/series-pictorial/paths-max" allow="fullscreen"></iframe>


API Reference
-------------
For an overview of the pictorial series options see the [API reference](https://api.highcharts.com/highcharts/series.pictorial).


================================================
FILE: docs/chart-and-series-types/pie-chart.md
================================================
Pie chart
=========

A pie chart is a circular chart divided into sectors which is proportional to the quantity it represents.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/pie-chart" allow="fullscreen"></iframe>

The pie chart have the same options as a [series](https://highcharts.com/docs/chart-concepts/series). For an overview of the pie chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.pie).

Pie chart features
==================

Donut chart
-----------

A donut chart is created by adding multiple pie series to the chart, setting the size and innerSize of each series to create concentric rings. See the [demo page for donuts](https://highcharts.com/demo/pie-donut).

Radial gradient colors
----------------------

A 3D-like ball look is created by applying radial gradient background colors for the slices. See the [demo page for radial gradients](https://highcharts.com/demo/pie-gradient).


================================================
FILE: docs/chart-and-series-types/polar-chart.md
================================================
Polar (Radar) chart
===================

Polar charts, also known as radar charts, require the highcharts-more.js file.

We took great care to reuse existing options and patterns when designing the option set of polar charts. The result is one single switch to turn a regular X-Y chart into a polar chart. Add the chart.polar option, and the X axis is wrapped around the perimeter while the Y axis extends from the center to the top.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/polar-wind-rose" allow="fullscreen"></iframe>

To create a polar chart set chart.polar to be true:

```js
chart: {
    polar: true
}
```

Every aspect of the chart anatomy, including series types like lines, areas, splines and columns as well as features like plot bands, data labels, tooltips, click events, stacking and axis setup, are transformed to the polar coordinate system.

Options related to polar charts
-------------------------------

|Option|Description|
|------|-----------|
|[chart.polar](https://api.highcharts.com/highcharts/chart.polar)|When true, cartesian charts are transformed into the polar coordinate system.|
|[pane](https://api.highcharts.com/highcharts#pane)|This configuration object holds general options for the combined X and Y axes set. Each xAxis or yAxis can reference the pane by index.|
|[pane.background](https://api.highcharts.com/highcharts/pane.background)|An object, or array of objects, for backgrounds. Sub options include backgroundColor (which can be solid or gradient),innerWidth, outerWidth, borderWidth, borderColor.|
|[pane.center](https://api.highcharts.com/highcharts/pane.center)|The center of the polar chart, given as an array of [x, y] positions. Positions can be given as integers that transform to pixels, or as percentages of the plot area size. Defaults to ['50%', '50%']|
|[pane.endAngle](https://api.highcharts.com/highcharts/pane.endAngle)|The end angle of the polar X axis, given in degrees where 0 is north. Defaults to startAngle + 360.|
|[pane.startAngle](https://api.highcharts.com/highcharts/pane.startAngle)|The start angle of the polar X axis, given in degrees where 0 is north. Defaults to 0.|
|[plotOptions.series.pointPlacement](https://api.highcharts.com/highcharts/plotOptions.series.pointPlacement)|This option applies to cartesian charts as well. In a column chart, when the pointPlacement is "on", the point will not create any padding of the X axis, and thus the first column will point directly north in a polar chart. If the pointPlacement is "between", the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.|

Polar chart examples
--------------------

*   [A polar chart with different series types](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/blog/polar-chart)
*   [A spider web](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/polar-spider)



================================================
FILE: docs/chart-and-series-types/pyramid-3d.md
================================================
3D pyramid
===

Pyramid 3D series type is a 3D variant of the [Pyramid Chart](https://www.highcharts.com/demo/pyramid). It represents data in the same way as a [Funnel Chart](https://www.highcharts.com/docs/chart-and-series-types/funnel-series) but reversed and without a neck width and neck height. Use this chart type for displaying percentage ratio or for visualizing volumes in different phases.

<iframe style="width: 100%; height: 532px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/pyramid3d" allow="fullscreen"></iframe>

Setting up
----------

Pyramid 3D is part of the Highcharts library. Load first `highcharts.js` and then sequentially the following files: `highcharts-3d.js`, `modules/cylinder.js`, `modules/funnel3d.js`, and `modules/pyramid3d.js`.

The 3D perspective will be enabled by setting `options3d.enabled` to [true](https://api.highcharts.com/highcharts/chart.options3d.enabled).

Series type could be set on [chart level](https://api.highcharts.com/highcharts/chart.type) or in [series options](https://api.highcharts.com/highcharts/series.pyramid3d.type).

Configuration options
---------------------

Each segment of the 3d pyramid has a height that relates to the data point’s value. The size of the pyramid fills the plot area by default but can be configured by setting the `width` and `height` properties.

See the [API](https://api.highcharts.com/highcharts/plotOptions.pyramid3d) for all other options related to the Pyramid 3d Chart.



================================================
FILE: docs/chart-and-series-types/radial-bar-chart.md
================================================
Radial (or Circular) bar chart
===

A radial (or circular) bar series visualizes columns on a polar coordinate system. Since the `xAxis` is vertical and `yAxis` is circular, as opposed to non-inverted variant, the shape of the columns is circular.

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/polar-radial-bar" allow="fullscreen"></iframe>


Getting started
---------------

### Loading the required scripts

In order to create a radial bar chart, the `highcharts.js` and `highcharts-more.js` scripts are required to be loaded, just like in case of the non-inverted version of a polar chart.

### Creating a radial bar chart

To create a radial bar series, both the `chart.polar` and `chart.inverted` options must be set to `true`.

```js
Highcharts.chart('container', {
    chart: {
        polar: true,
        inverted: true
    }
});
```

Data format
-----------

The format of the data is the same as in any other `column` or `bar` series. Example:

```js
series: [{
    type: 'column',
    data: [1, 2, 3, 4, 5]
}]
```

Examples of use
---------------

**Stacked two series with enabled data labels**

Just as any normal column series on a non-inverted chart, the radial bar series can also be stacked.

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-polar/column-inverted-stacking" allow="fullscreen"></iframe>

**Custom thresholds for the same set of data**

Setting a different `threshold` will set a new starting point for the series.

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-polar/column-inverted-threshold" allow="fullscreen"></iframe>

**Different start and end angles of a pane**

A custom `startAngle` and `endAngle`.

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-polar/column-inverted-endangle" allow="fullscreen"></iframe>

**Constantly updating series (with color axis)**

Updating points.

<iframe style="width: 100%; height: 600px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-polar/column-inverted-update" allow="fullscreen"></iframe>


================================================
FILE: docs/chart-and-series-types/range-series.md
================================================
Range series
============

Using range series requires that the highcharts-more.js file is loaded.

Highcharts includes range series in three different flavours, namely "arearange", "areasplinerange" and "columnrange". Instead of cluttering up the API with a "barrange" series type, we let you achieve this by setting [chart.inverted](https://api.highcharts.com/highcharts/chart.inverted) to true with a column range series. Data points for range series can be defined either as objects (`{ x: 0, low: 1, high: 9 }`) or as arrays (`[0, 1, 9]`). In either case, the x value can be skipped.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/arearange" allow="fullscreen"></iframe>

To create a range series set chart.type or series.type to "columnrange":


```js
chart: {
    type: 'columnrange'
}
```

Options related to Range series
-------------------------------

|Option|Description|
|------|-----------|
|[dataLabels](https://api.highcharts.com/highcharts/plotOptions.arearange.dataLabels)|Since both the low values and high values for a series need a separate data label, we added a new set of options, "xLow", "xHigh", "yLow" and "yHigh". With these options, the relative position can be altered.|
|[lowMarker](https://api.highcharts.com/highcharts/plotOptions.arearange.lowMarker)|The "lowMarker" option helps to visualize better the low and high values by customizing their symbols separately. |

Range series examples
---------------------

*   [View horizontal column range example with data labels](https://www.highcharts.com/demo/columnrange)



================================================
FILE: docs/chart-and-series-types/sankey-diagram.md
================================================
Sankey diagram
===

A Sankey diagram is a type of flow diagram, in which the width of the link between two nodes is shown proportionally to the flow quantity.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.sankey)_

<iframe style="width: 100%; height: 485px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/sankey-diagram" allow="fullscreen"></iframe>

Data structure
--------------

A Sankey diagram consists of two types of data. The nodes are the boxes that the items or other measures flow between. The links are the bands visualizing the flow itself. In Highcharts, only the values of the links need to be defined; the nodes will be generated dynamically. Each link has three parameters `from`, `to` and `weight`.


    keys: ['from', 'to', 'weight'],
    data: [
             ['Oil', 'Transportation', 94],
             ['Natural Gas', 'Transportation', 3],
             ['Coal', 'Transportation', 0],
             ['Renewable', 'Transportation', 0],
             ['Nuclear', 'Transportation', 3],

             ['Oil', 'Industrial', 41],
             ['Natural Gas', 'Industrial', 40],
             ['Coal', 'Industrial', 7],
             ['Renewable', 'Industrial', 11],
             ['Nuclear', 'Industrial', 0],

             ['Oil', 'Residential & Commercial', 17],
             ['Natural Gas', 'Residential & Commercial', 76],
             ['Coal', 'Residential & Commercial', 1],
             ['Renewable', 'Residential & Commercial', 7],
             ['Nuclear', 'Residential & Commercial', 0],

             ['Oil', 'Electric Power', 1],
             ['Natural Gas', 'Electric Power', 18],
             ['Coal', 'Electric Power', 48],
             ['Renewable', 'Electric Power', 11],
             ['Nuclear', 'Electric Power', 22]
    ],


Nodes
-----

The nodes are generated so that the total weight going in or out of a node is visualized. Nodes are instances of [Point](https://api.highcharts.com/class-reference/Highcharts.Point) and are available from the `series.nodes` array. The width of the nodes can be set with the `nodeWidth` option, and padding between them with `nodePadding`.

In addition to auto-generated properties, custom properties such as `color` or `colorIndex` can be set by adding an array, [nodes](https://api.highcharts.com/highcharts/series.sankey.nodes), to the series options and linking the nodes by id; the following jsfiddle [demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-inverted/) illustrates this concept.



================================================
FILE: docs/chart-and-series-types/scatter-chart.md
================================================
Scatter chart
=============

A scatter chart draws a single point for each point of data in a series without connecting them.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/scatter" allow="fullscreen"></iframe>

Scatter chart features
----------------------

An important distinction between a scatter series and a line series is that the scatter series doesn't require sorting because the mouse tracker for the tooltip is activated on each single marker. A line can be drawn between the markers by setting the lineWidth option to something higher than 0.

For an overview of the scatter chart options see the [API reference](https://api.highcharts.com/highcharts/plotOptions.scatter).

3D scatter charts
-----------------

In 3D charts, the scatter points also have a Z dimension. This is handled by a separate series type, [scatter3D](https://api.highcharts.com/highcharts/plotOptions.scatter3d).


================================================
FILE: docs/chart-and-series-types/spline-chart.md
================================================
Spline chart
============

The spline chart draws a curved line between the points in a data series.

<iframe style="width: 100%; height: 480px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/spline-inverted" allow="fullscreen"></iframe>

Spline chart features
---------------------

The spline chart offers the same options as the [line chart](https://highcharts.com/docs/chart-and-series-types/line-chart) and [series](https://highcharts.com/docs/chart-concepts/series), except the step feature. See the [API reference](https://api.highcharts.com/highcharts/plotOptions.spline) for more information on the spline chart options.


================================================
FILE: docs/chart-and-series-types/stream-graph.md
================================================
Stream graph
===

A stream graph is a type of stacked area graph which is displaced around a central axis, resulting in a flowing and organic shape.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.streamgraph)_

<iframe style="width: 100%; height: 660px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/streamgraph" allow="fullscreen"></iframe>

Data structure
--------------

The data of a stream graph is simply set as Y values and possibly X values. Each band in the stream graph represents a series, and the [series](https://www.highcharts.com/docs/chart-concepts/series) are stacked against each other.


```js
series: [{
    "name": "Finland",
    "data": [
        0, 11, 4, 3, 6, 0, 0, 6
    ]
}, {
    "name": "Austria",
    "data": [
        0, 3, 4, 2, 4, 0, 0, 8, 8
    ]
}, {
    "name": "Sweden",
    "data": [
        0, 2, 5, 3, 7, 0, 0, 10, 4
    ]
}]
```


Labelling
---------

Thanks to the series-label module, Highcharts allows applying labels in the best-fit position on top of the stream items, maximizing the legibility and quick perception of the data.



================================================
FILE: docs/chart-and-series-types/sunburst-series.md
================================================
Sunburst
===

A Sunburst displays hierarchical data, where a level in the hierarchy is represented by a circle. The center represents the root node of the [tree](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#tree-data-structure). The visualization bear a resemblance to both treemap and pie charts.

<iframe style="width: 100%; height: 850px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/sunburst" allow="fullscreen"></iframe>

Requirements
------------

The sunburst chart requires the following module `modules/sunburst.js`.

Options
-------

Click [here](https://api.highcharts.com/highcharts/plotOptions.sunburst) to get an overview of all options available for the sunburst series.

Data structure
--------------

The data is structured as a [tree](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#tree-data-structure), where each point represents a node. Each node can have its own children.

The tree automatically has one node at the top representing the root node. If a point has an undefined parent, or the parent is not matching any id, the parent will be automatically set to the root node.

The following is an example of how the tree is built in Highcharts:


```js
data: [{
    name: 'I have children',
    id: 'id-1'
}, {
    name: 'I am a child',
    parent: 'id-1',
    value: 2
}, {
    name: 'I am a smaller child',
    parent: 'id-1',
    value: 1
}]
```


Work with levels
----------------

The levels option gives the ability to set options on a specific level. This comes in handy whenever all points which lies on a certain level in the data tree, should stand out and differ from the rest of the points in the series.

Below is an example where the first level will use have `colorByPoint: true`, and the rest will default to `colorByPoint: false` and thereby inherit its color from the parent.


```js
var chart = new Highcharts.Chart({
    ...
    series: [{
       levels: [{
           level: 1,
           colorByPoint: true
       }],
       ...
    }],
    ...
});
```

### Static or dynamic levels

`levelIsConstant` is an option used together with the `levels` and `allowDrillToNode` options. By default it is set to true. When set to false the first level visible when drilling is considered to be level one. Otherwise the level will be the same as in the tree structure.

### Traversing through levels

When the `allowTraversingTree` option is true, clicking on a point will set that point as the rendered root node. To help navigate through levels, breadcrumbs are rendered, showing a single button to the previous level or the full path back to the root node.

Read more about the breadcrumbs [here](https://www.highcharts.com/docs/advanced-chart-features/breadcrumbs).




================================================
FILE: docs/chart-and-series-types/timeline-series.md
================================================
Timeline chart
===

A Timeline chart visualizes important events over a time span. Charts with a Timeline series display every data point as a separate event along a horizontal or vertical line. The Timeline series is also referred to as a Timeline Diagram.

For each point defined in the timeline series, a flag is placed with a descriptive text. It is advised, to place the longer descriptions of an event in the tooltip. The description will then be visible on hovering the points. By default, the tooltip will show text specified for the `description` property of the data series point.

Getting started
---------------

Timeline series requires loading both the Highcharts and the `timeline.js` module.

Here is an example for loading Timeline into a webpage:

```html
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/timeline.js"></script>
```
Data format
-----------

The events in the Timeline chart can be visualized in two ways:

1.  By dividing the timeline into even time periods for the number of data points specified in the series data.
2.  By placing events tied to a datetime axis. Then it’s showing the exact time intervals between all points.

The Timeline series data is structured differently for the above alternatives for visualizing Timeline charts.

### Data series for a Timeline chart with time periods

The data series has no `x`property set.

```js
 data: [{
    name: 'Some date',
    label: 'Event label',
    description: 'Description of this event.'
}, {
    name: 'Another date',
    label: 'Another event label',
    description: 'Description of second event'
}]
```

### Events tied to a datetime axis

To place events on a datetime axis, the `x` property can be set with a timestamp in milliseconds since 1970.

Example of data series:

```js
data: [{
    x: 1514764800000,
    name: 'Event name',
    label: 'Event label',
    description: 'Description of this event.'
}, {
    x: 1526774400000,
    name: 'Event name',
    label: 'Another event label',
    description: 'Description of second event'
}]
```

_The demo below illustrates a timeline of space exploration. The demo shows even intervals_

<iframe width="100%" height="470" style="null" src="https://www.highcharts.com/samples/embed/highcharts/series-timeline/connector-styles" allow="fullscreen"></iframe>

The demo below also illustrates the key moments of space exploration, but it’s extended by further events, and it shows real-time dates distributed along a `datetime` axis.

<iframe width="100%" height="470" style="null" src="https://www.highcharts.com/samples/embed/highcharts/series-timeline/datetime-axis" allow="fullscreen"></iframe>

Vertical timeline
-----------------

To display a vertical timeline, set `chart.inverted` to `true`.

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-timeline/inverted" allow="fullscreen"></iframe>

Alternate labels
----------------

Use the `alternate` property in the `dataLabels` configuration, for placing the data labels alternately (on both sides of the point).

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/series-timeline/alternate-labels" allow="fullscreen"></iframe>

Other configuring options
-------------------------

Customize a timeline chart with options that are standard to most Highcharts charts, such as data labels `width`, `distance` or using the point properties, `color`, `x`, `markers` or the connectors. In the demo below the color properties of the `marker` data point property is setting the color of a section in the timeline.

The demo below illustrates styling of different elements in the timeline series chart.

<iframe style="width: 100%; height: 470px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/blog/timeline" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/treegraph-chart.md
================================================
Treegraph chart
===
A Tree graph is a way of visualizing a [tree](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#tree-data-structure) or hierarchy data structure. The best examples of a tree data structure are:

* genealogy trees
* directories in computer science
* decision trees

Our tree representation is an oriented rooted tree. This means that the direction of the connections matter, and there is one node in each set of data that does not have a parent (is the root of the tree). In contrast to treemap and sunburst, this series type does not require the `value` property, because each point position is based solely on its relation to other nodes in the tree.

In order to use this series type, you need to load the `modules/treemap.js` and `modules/treegraph.js` modules.

<iframe style="width: 100%; height: 700px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/treegraph-chart" allow="fullscreen"></iframe>

### Data structure

The data is structured as a [tree](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#tree-data-structure), where each point represents a node. Each node can have its own children.  The tree automatically has one node at the top representing the root node. If a point has an undefined parent, or the parent is not matching any `id`, the parent will be automatically set to the root node. There can be multiple nodes without a parent, and they will be positioned as separate trees.

The following is an example of how the tree is built in Highcharts:

```js
data: [{
    name: 'I have children',
    id: 'id-1'
}, {
    name: 'I am a child',
    parent: 'id-1'
}, {
    name: 'I am a smaller child',
    parent: 'id-1'
}]
```

### Algorithms

Algorithms decide the positioning of the points. Currently there is one algorithm available, which is the [Walker](https://link.springer.com/chapter/10.1007/3-540-36151-0_32) algorithm for calculating the nodes position in the tree graph.

API options
-----------

### Links

In contrast to treemap series, the connections between the nodes are represented as links.  The links are generated from the options of the child. The shape of the link is the same as in the organization chart, and the same options apply.  To apply general options to all links, you can define the link options like this:

```js
series: [{
    type: 'treegraph',
    link: {
        type: 'curved',
        lineWidth: 3
    },
    data: [{
        name: 'I have children',
        id: 'id-1'
    }, {
        name: 'I am a child',
        parent: 'id-1'
    }, {
        name: 'I am a smaller child',
        parent: 'id-1'
    }]
}]
```

To change the configuration of a specific link, you have to specify the link object in the point configuration, like this:

```js
data: [{
    name: 'parent',
    id: 'id-1
}, {
    name: 'child',
    parent: 'id-1',
    link: {
        type: 'curved',
        lineWidth: 5
    }
}]
```

This setting will take effect on the link that goes **to** the given node.

### Collapse Feature
The nodes' default behavior on click is to toggle the collapsed/expanded state. When clicking any node (which has children) the visibility of all child nodes and links will be hidden. This allows hiding any sub-trees and makes the data easier to read. When clicking on the same node again, all nodes and links will be visible again. You can test this feature on any demo, since this is a default behavior.

### Options

For an overview over the options for the treegraph, see the [API](https://api.highcharts.com/highcharts/plotOptions.treegraph).


### More demos

*   [Phylogenetic Treegraph](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treegraph-chart)
*   [Treegraph chart with different link types](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-treegraph/link-types)
*   [Treegraph chart with text path on dataLabels for links](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-treegraph/link-text-path)
*   [Treegraph chart with different node level for nodes](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series-treegraph/node-level)
*   [Inverted treegraph](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treegraph-inverted)



================================================
FILE: docs/chart-and-series-types/treemap.md
================================================
Treemap
===

<iframe width="320" height="410" style="border: 0; width: 100%; height: 420px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/treemap-with-levels" allow="fullscreen"></iframe>

### Requirements

The treemap chart requires the file`modules/treemap.js`.
For use with [colorAxis](https://api.highcharts.com/highmaps/colorAxis), the `modules/heatmap.js` must be included as well.

### Data structure

The data is structured as a [tree](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#tree-data-structure), where each point represents a node. Each node can have its own children.

The tree automatically has one node at the top representing the root node. If a point has an undefined parent, or the parent is not matching any id, the parent will be automatically set to the root node.

The following is an example of how the tree is built in Highcharts:

```js
data: [{
    name: 'I have children',
    id: 'id-1'
}, {
    name: 'I am a child',
    parent: 'id-1',
    value: 2
}, {
    name: 'I am a smaller child',
    parent: 'id-1',
    value: 1
}]
```


### Algorithms

Algorithms decide the positioning and sizing of the points. Which algorithm you use will therefore have a major part in defining the look of your chart. Highcharts Treemap comes with four algorithms ready to use.

##### Slice And Dice

Simple and fast algorithm which is great for structuring the points. The drawback with the Slice And Dice is that nodes can get really bad aspect ratio, and thus become hard to compare. This occurs often with larger datasets.

See an [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/) of Slice And Dice.

##### Stripes

Also a simple algorithm which is quite similar to Slice And Dice. Instead of alternating the direction between each node, it draws all nodes in same direction, creating a set of columns.

See an [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/treemap-layoutalgorithm-stripes/) of Stripes.

##### Squarified

An algorithm which aims to give each point a low aspect ratio. It adds the points one by one to a strip until it finds the best aspect ratio available. Then it alternates the direction and does the same with a new strip. The process continues in the same pattern until all points are placed in the chart.

See an [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/treemap-layoutalgorithm-squarified/) of Squarified.

##### Strip

Not to be mistaken as the Stripes algorithm, it has some clear differences in behavior. The Strip algorithm has the same objective as the Squarified algorithm, to get low aspect ratios. The process is quite similar, but instead of alternating the direction, the strips are drawn side by side as columns.

See an [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/treemap-layoutalgorithm-strip/) of Strip.

##### Add your own algorithm

Are you looking to use another algorithm, or maybe a more advanced version of the above? Adding a new algorithm to Highcharts treemaps is a fairly simple task. The process is the following:

Start by creating the function containing the algorithm. Two arguments are passed to the function. First argument is an object containing details of the parent. Second argument is an array of objects, where each object contains details about one child.

The parent object which is passed along has the following variables:

*   **Number x** // The x position of the parent
*   **Number y** // The y position of the parent
*   **Number width** // The width of the parent
*   **Number height** // The height of the parent
*   **String direction** // The starting direction, either vertical or horizontal, which the children should be drawn
*   **Number val** // The sum of all the children values

The each child which is passed along has the following variables:

*   **Number val** // The point value
*   **Number level** // The level which the point node is in the tree

A starting point for the function could be the following

```js
function myFunction(parent, children) {
    childrenAreas = [];
    children.forEach(function(child) {
        // Do some calculations

        // These return values are required for each child
        childrenAreas.push({
            x: someXValue,
            y: someYValue,
            width: someWidth,
            height: someHeight
        });
    });
    return childrenAreas;
};
```


After the algorithm function is finished, then we have to add it by extending the treemap prototype with the function

```js
Highcharts.seriesTypes.treemap.prototype.myCustomAlgorithm = myFunction;
```


Afterwards when you declare the chart options, then specify that the series.layoutAlgorithm should be your new custom algorithm.

```js
const chart = new Highcharts.Chart({
    ...
    series: [{
       layoutAlgorithm: "myCustomAlgorithm",
       ...
    }],
    ...
});
```

### Work with levels

The levels option gives the ability to set options on a specific level. This comes in handy whenever all points which lie on a certain level in the data tree, should stand out and differ from the rest of the points in the series.

Below is an example where the first level will use the Slice And Dice algorithm, and the rest will use the Squarified algorithm. Also all points on the second level will be colored blue, while the rest will be in the color red.

```js
const chart = new Highcharts.Chart({
    ...
    series: [{
       layoutAlgorithm: 'squarified',
       color: 'red',
       levels: [{
           level: 1,
           layoutAlgorithm: 'sliceAndDice'
       }, {
           level: 2,
           color: 'blue'
       }],
       ...
    }],
    ...
});
```

##### Level Is Constant:

The `levelIsConstant` option is used together with the levels and `allowTraversingTree` options. By default it is set to true. When set to false the first level visible when drilling is considered to be level one. Otherwise the level will be the same as in the tree structure.

An [example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treemap-large-dataset) where `levelIsConstant` is set to false.

##### Traversing through levels

When the `allowTraversingTree` option is true, clicking on a point will set that point as the rendered root node. To help navigate through levels, breadcrumbs are rendered, showing a single button to the previous level or the full path back to the root node.

Read more about the breadcrumbs [here](https://www.highcharts.com/docs/advanced-chart-features/breadcrumbs).

### Group headers and data labels
Data labels can be applied to treemaps just like any other series, and the
default position for the data level is in the center of the node. Data labels
can be specified per level.

A special form of data label is the group headers. To enable group headers, set
the
[dataLabels.headers](https://api.highcharts.com/highcharts/series.treemap.dataLabels.headers)
option to true. The most common way of applying headers is to enable them on a
specific level. By default, headers will take up space within the group node,
causing the remaining space for leaf nodes to be reduced. This may cause the
relative size between leaf nodes to be skewed. To prevent that, there's an
experimental option
[nodeSizeBy](https://api.highcharts.com/highcharts/series.treemap.dataLabels.nodeSizeBy),
that can be set to `leaf`.

<iframe style="border: 0; width: 100%; height: 420px;" src="https://www.highcharts.com/samples/embed/highcharts/series-treemap/headers" allow="fullscreen"></iframe>



### Use with ColorAxis

<iframe style="border: 0; width: 100%; height: 420px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/treemap-coloraxis" allow="fullscreen"></iframe>

For use with `colorAxis`, then the `modules/heatmap.js`must be included as well.

After the module is included in your project, a `colorAxis` object can be defined in the chart options. Read the [API](https://api.highcharts.com/highmaps/colorAxis) for details about its options.

```js
const chart = new Highcharts.Chart({
    ...
    colorAxis: {
        minColor: '#FFFFFF',
        maxColor: Highcharts.getOptions().colors[0]
    },
    ...
});
```


And each point needs its own `colorValue`.

```js
const chart = new Highcharts.Chart({
    ...
    colorAxis: {
        ...
    },
    series: [{
        ...
        data: [{
            name: "Point 1",
            value: 1,
            colorValue: 5 // This value decides which color on the scale that the point gets.
        }],
        ...
    }],
    ...
});
```

[Full example is found here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treemap-coloraxis)

### Treemap clustering of small points

Treemap clustering simplifies the visualization of large datasets by organizing data points into larger blocks, enhancing both readability and performance. This approach is particularly useful for presenting vast amounts of information in a compact, easy-to-understand format.

To configure treemap clustering, the `cluster` option is used. Within this option, you can specify `pixelWidth` and `pixelHeight`, which set the minimum pixel size for areas before they are grouped. These thresholds ensure that smaller sections are consolidated into larger, more visible areas for better clarity. The `name` parameter allows you to define a custom label for the grouped nodes, which will appear in tooltips, data labels, and other chart elements. Read the [API](https://api.highcharts.com/highcharts/series.treemap.cluster) for details about its options.

```js
const chart = new Highcharts.Chart({
    ...
    series: [{
        ...
        type: "treemap",
        cluster: {
            enabled: true,
            pixelHeight: 20,
            pixelWidth: 10
        }
        ...
    }],
    ...
});
```

[Full example is found here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/treemap-grouping-advanced)

### Options

For an overview over the options for the treemap, see the [API](https://api.highcharts.com/highcharts/plotOptions.treemap).

### Mode demos

*   [Treemap with colorAxis](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treemap-coloraxis)
*   [Treemap displaying the global mortality rate and causes](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treemap-large-dataset)
*   [Treemap using level specific options](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/treemap-with-levels)



================================================
FILE: docs/chart-and-series-types/variable-radius-pie-chart.md
================================================
Variable radius pie
===

A variable pie chart is a circular chart divided into sectors which are proportional to the quantity or volume they represent. As an addition to the standard pie chart, which requires only one parameter, the variable pie series uses two parameter Y and Z, where Y represents the slice’s volume, and Z represents the slice’s radius.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.variablepie)_

<iframe style="width: 100%; height: 532px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/variable-radius-pie" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/variable-radius-pie/) to check the code.

How to create a variable-radius-pie series
------------------------------------------

The variable radius pie series type requires the following module [modules/variablepie.js](https://code.highcharts.com/modules/variable-pie.js).

Here are the steps to create a variable radius pie chart:

1. set the series type to `variablepie`:

```js
chart: {
    type: 'variablepie'
}
```


2. Use Y and Z options in the series to display the volume and the radius for each slice:

```js
series: [{
    minPointSize: 100,
    innerSize: '20%',
    data: [{
        y: 505370,
        z: 1
    }, {
        y: 551500,
        z: 2
    }, {
        y: 312685,
        z: 1
    }, {
        y: 78867,
        z: 3
    }, {
        y: 301340,
        z: 4
    }, {
        y: 41277,
        z: 5
    }, {
        y: 357022,
        z: 5
    }]
}]
```

Variable pie series specific options
------------------------------------

*   **zMin**:The minimum possible Z value used for calculating point's radius. If the point's Z value is smaller than zMin, the slice will be drawn according to the zMin value. zMin improves user experience by allowing the visualization of slices with very small Z values.
*   **zMax**: The maximum possible z value used for calculating the point's radius. If the point's Z value is bigger than zMax, the slice will be drawn according to the zMax value. zMax improves user experience by avoiding a huge slice misproportion.
*   **minPointSize**: This option sets the minimum size of any points' radius with a value closes to zero. This option works similar to [minPointLength](https://api.highcharts.com/highcharts/plotOptions.column.minPointLength) in column charts.
*   **maxPointSize**: The maximum size of the points' radius. The radius of a pie slice cannot be bigger than maxPointSize
*   **sizeBy**: This option is related to how the Z value is represented in a pie slice. The pie slice's value can be represented by the area or the radius of the slice. The default, area, corresponds best to the human perception of the size of each pie slice.



================================================
FILE: docs/chart-and-series-types/variwide-chart.md
================================================
Variwide chart
===

A variwide chart is a column chart where each column has a separate width to represent the third dimension. A variwide chart is related to the [Marimekko chart](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#mosaic-plot), but while a Marimekko computes the width for the stack to fill the whole plot area, the variwide chart simply lets the column widths reflect a value.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.variwide)_

<iframe style="width: 100%; height: 416px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/variwide" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/variwide/) to check the code.

Data structure
--------------

The variwide series uses two options `y` and `z`. The y option determines the height of the column, like a common column chart, and the z option determines the width of the column. Check the [API options](https://api.highcharts.com/highcharts/plotOptions.variwide) for more details.



================================================
FILE: docs/chart-and-series-types/vector-plot.md
================================================
Vector plot
===

A vector plot is a type of cartesian chart where each point has an X and Y position, a length, and a direction. Vectors are drawn as arrows.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.vector)_

<iframe style="width: 100%; height: 532px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/vector-plot" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/vector-plot/) to check the code.

Data structure
--------------

Each vector data point is defined as `[x, y, length, direction]`.

The length is the relative length of the vector compared to the other vectors. The actual vectors are then rendered so that the [`vectorLength`](https://api.highcharts.com/highcharts/plotOptions.vector.vectorLength) option defines the pixel length of the longest vector, and the other vectors are relative to the longest vector.

The direction is given in degrees 0-360, where 0 is north, the arrow pointing downwards.

Other options
-------------

The [rotationOrigin](https://api.highcharts.com/highcharts/plotOptions.vector.rotationOrigin) option sets the vector’s point of rotation that could be the center (by default), the tile, or the head. `rotationOrigin` also sets the rotation direction (left or right). See the [API](https://api.highcharts.com/highcharts/plotOptions.vector) for full documentation.



================================================
FILE: docs/chart-and-series-types/venn-series.md
================================================
Venn series
===

The venn series has the ability to visualize both Venn and Euler diagrams. They are often used in the fields of mathematics, statistics, logistics and computer science to visualize logical relationships.

Euler diagrams displays a number of sets and the relationship between them. The sets are represented by circles, and the relation between the sets are represented by the overlap, or lack of overlap between the circles.

A venn diagram displays all possible logical relations between a collection of different sets, and is therefore a special case of euler diagrams, which does not necessarily have a relationship between all sets.

Getting started
---------------

**Loading the Venn module**

Loading the module `modules/venn.js` will enable the use of venn series type. As a module it will require that Highcharts is loaded in advance. The following is an example of how the Venn series can be loaded using the Highcharts CDN. Please see the [Installation article](https://www.highcharts.com/docs/getting-started/installation) for more information on how Highcharts and its modules can be loaded.

```html
<script href="https://code.highcharts.com/highcharts.js"></script>
<script href="https://code.highcharts.com/modules/venn.js"></script>
```

**Creating a venn diagram**

Since the venn series is an extension to the Highcharts library, it is the chart constructor that should be used when creating the chart.

```js
Highcharts.chart('container', {
    // Chart options
});
```

Next up is adding the a series with type venn where the configurations and data for the venn diagram can be set.

```js
Highcharts.chart('container', {
    series: [{
        type: 'venn',
        data: [/* Series data */]
    }]
});
```

The following data will create two sets A and B, where both sets will have a proportional area of size 2.

```js
// Series data
data: [{
    sets: ['A'],
    value: 2
}, {
    sets: ['B'],
    value: 2
}]
```

So far there is no relationship between the two sets, and the current data will create two separated circles for A and B. Another data point can be added to define the relationship between A and B. The following point will define an intersection between A and B, where the area of overlap will have a size of 1.

```js
{
    sets: ['A', 'B'],
    value: 1
}
```

The visualization should now look like a proper venn diagram, but there is little information about what data is actually visualized. This can be improved greatly by naming the sets. If the property `name` is not specified, then it will default to the values in `sets` joined by `∩`, e.g. `A∩B`.

In the following example A and B will be named as Apples and Bananas, while the relationship between them will be named Fruits.

```js
// Series data
data: [{
    name: 'Apples',
    sets: ['A'],
    value: 2
}, {
    name: 'Bananas',
    sets: ['B'],
    value: 2
}, {
    name: 'Fruits',
    sets: ['A', 'B'],
    value: 1
}]
```

The final visualization should now display a venn diagram of the relation between Apples and Bananas.

<iframe width="100%" height="450" style="null" src="https://www.highcharts.com/samples/embed/highcharts/series-venn/basic" allow="fullscreen"></iframe>

Its configuration should in full look as the following.

```js
Highcharts.chart('container', {
    series: [{
        type: 'venn',
        data: [{
            name: 'Apples',
            sets: ['A'],
            value: 2
        }, {
            name: 'Bananas',
            sets: ['B'],
            value: 2
        }, {
            name: 'Fruits',
            sets: ['A', 'B'],
            value: 1
        }]
    }]
});
```

**Relevant features and options**

As with all series types in Highcharts there is many familiar features and options that will also be available for use with the venn series. Please see the [Highcharts API](https://api.highcharts.com/highcharts/) for a full overview of options for the venn series.

**venn.data.name**

The option [venn.data.name](https://api.highcharts.com/series.venn.data.name) sets the name of a point. Used in data labels and tooltip. If name is not defined then it will default to the joined values in [sets](https://api.highcharts.com/series.venn.data.sets).

**venn.data.sets**

The option [venn.data.sets](https://api.highcharts.com/series.venn.data.sets) defines which set or sets the options will be applied to. If a single entry is defined, then it will create a new set. If more than one entry is defined, then it will define the area of overlap for the intersection between the sets in the array.

**venn.data.value**

The option [venn.data.value](https://api.highcharts.com/series.venn.data.value) defines the relative area of the circle, or area of overlap between two sets in the venn or euler diagram.

Use Cases
---------

The venn series can be used to create both Venn and Euler diagrams.

**Venn diagram of The Unattainable Triangle**

The unattainable triangle is a reference often used in marketing and advertising, which says that you can either have it fast, cheap, or good, but you cannot have it all. In the triangle the three qualities make up the corners, while the sides create the relationship between these qualities. Since the reference is all about relationships this can also be very well displayed as a venn diagram, as can be seen in the following demo [Venn diagram of the Unattainable Triangle.](https://highcharts.com/demo/venn-diagram)

<iframe style="width: 100%; height: 520px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/venn-diagram" allow="fullscreen"></iframe>

Euler diagram of the Relationship between Euler and Venn diagrams
-----------------------------------------------------------------

Euler diagrams are representing a number of sets and the relationship between these sets. An euler diagram will only show the relationships that is relevant, which means that not necessarily every set will overlap each other. While a venn diagram will show all possible relationships between all sets, which means that all sets will overlap each other. A venn diagram is therefore a special case of euler diagrams. This relationship between the euler and venn diagrams can be displayed as an euler diagram, as can be seen in the following demo [Euler diagram of the Relationship between Euler and Venn diagrams.](https://highcharts.com/demo/euler-diagram)

<iframe style="width: 100%; height: 520px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/euler-diagram" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-and-series-types/waterfall-series.md
================================================
Waterfall series
================

A waterfall chart is a form of data visualization that helps in determining the
cumulative effect of sequentially introduced positive or negative values. The
waterfall chart is also known as also known as **bridge**, especially in
finance, or a flying bricks chart due to the apparent suspension of columns in
mid-air. Waterfall charts are commonly used in financial reports to display
changes in revenue or expenses over periods, showing how each factor contributes
to the overall result.

![waterfall.png](waterfall.png)

### Defining the points

Defining the points in a waterfall is pretty straight forward. Each point is accumulated on top of the next, or subtracted from the sum if it is negative. The most intuitive way of defining a series is to give each point a name and an Y value, and set [xAxis.type](https://api.highcharts.com/highcharts/xAxis.type) to _"category"_. A live demo can be seen at [www.highcharts.com/demo/waterfall](https://highcharts.com/demo/waterfall).

Furthermore, a waterfall series has two kinds of automatically computed columns. These points don't have an Y value, only a flag that specifies their type:

*   `isIntermediateSum` 
    When this property is true, the points acts as a summary column for the values added or subtracted since the last intermediate sum.
*   `isSum`
    When this property is true, the point display the total sum across the entire series.

Sample code:

```js
data: [{
    name: 'Start',
    y: 120000
}, {
    name: 'Product Revenue',
    y: 569000
}, {
    name: 'Service Revenue',
    y: 231000
}, {
    name: 'Positive Balance',
    isIntermediateSum: true,
    color: '#0066FF'
}, {
    name: 'Fixed Costs',
    y: -342000
}, {
    name: 'Variable Costs',
    y: -233000
}, {
    name: 'Balance',
    isSum: true,
    color: '#0066FF'
}]
```

### Colors

The up and down points can be colored separately through the [color](https://api.highcharts.com/highcharts/plotOptions.waterfall.color) and [upColor](https://api.highcharts.com/highcharts/plotOptions.waterfall.upColor) properties. Sums and intermediate sums have no specific colors, but these columns - as any column - can be colored by individual color settings.



================================================
FILE: docs/chart-and-series-types/wind-barbs-series.md
================================================
Wind barbs
===

Wind barbs visualize wind speed and direction in one graphical form. The stem direction defines the wind direction, while the barbs’ numbers and shapes define the wind speed.

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.windbarb)_

<iframe style="width: 100%; height: 332px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/windbarb-series" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/windbarb-series/) to check the code.

Data structure
--------------

Each wind barb point has an `x`, a `value`, and a `direction`.

The `value` sets the wind speed in meter per second. The resulting graphic, by convention, adds a full barb for each 10 knots (5,14 m/s) and a half barb for each 5 knots (2.57 m/s).

The `direction` is given in degrees, where 0 is a northerly wind, pointing towards the south.

Other options
-------------

*   **onSeries**: allows drawing the wind barb next to another series in the chart, typically a line or area series representing the wind speed. Otherwise, it is rendered on top of the X axis. For more details click [here](https://api.highcharts.com/highcharts/plotOptions.windbarb.onSeries).
*   **vectorLength**: sets the pixel length of the stems. For more details click [here](https://api.highcharts.com/highcharts/plotOptions.windbarb.vectorLength).
*   **yOffset** is a pixel offset, preventing the barbs from covering the underlying series or axis. For more details click [here](https://api.highcharts.com/highcharts/plotOptions.windbarb.yOffset).

See the full set of options in the [API](https://api.highcharts.com/highcharts/plotOptions.windbarb).



================================================
FILE: docs/chart-and-series-types/word-cloud-series.md
================================================
Word cloud
===

A word cloud is a visualization of a set of words, where the size and placement of a word is determined by how it is weighted.

<iframe style="width: 100%; height: 416px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/wordcloud" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/wordcloud/) to check the code

Requirements
------------

The word cloud chart requires the following module `modules/wordcloud.js`.

Options
-------

Click [here](https://api.highcharts.com/highcharts/plotOptions.wordcloud) to get an overview of all options available for the wordcloud series.

Data structure
--------------

Each point in the wordcloud series is required to have a `name` and a `weight`. The name determines the text to be drawn in the visualization, while the weight determines its priority. The points with the highest priority gets drawn first, and will be draw with larger font-size.

```js
data: [{
    name: 'Lorem',
    weight: 3
}, {
    name: 'Ipsum',
    weight: 2
}, {
    name: 'Dolor',
    weight: 1
}]
```

Advanced usage
--------------

### Custom spiralling algorithm

Spirals are used for moving a word after the initial position experienced a collision with either another word or the borders of the playing field.
To implement a custom spiral, look at the function archimedeanSpiral for example:

```js
/**
 * archimedeanSpiral - Gives a set of coordinates for an Archimedian Spiral.
 *
 * @param {number} t How far along the spiral we have traversed.
 * @return {object} Resulting coordinates, x and y.
 */
var archimedeanSpiral = function archimedeanSpiral(t) {
    t *= 0.1;
    return {
        x: t * Math.cos(t),
        y: t * Math.sin(t)
    };
};
```

The spiralling algorithm is made accessible by attaching it to the `spirals` property:


```js
Highcharts.seriesTypes.wordcloud.prototype.spirals.archimedean = archimedeanSpiral;
```

Afterwards you can use the algorithm by specifying the option **series`<wordcloud>`.spiral**:

```js
Highcharts.chart(..., {
  series: [{
    type: 'wordcloud',
    spiral: 'archimedean'
  }]
});
```

### Custom placement strategies

Strategies are used for deciding rotation and initial position of a word.
To implement a custom strategy, have a look at the function randomPlacement for example:

```js
var randomPlacement = function randomPlacement(point, options) {
  var field = options.field,
    r = options.rotation;
  return {
    x: getRandomPosition(field.width) - (field.width / 2),
    y: getRandomPosition(field.height) - (field.height / 2),
   rotation: getRotation(r.orientations, r.from, r.to)
  };
};
```

The placement algorithm is made accessible by attaching it to the `placementStrategy` property:


```js
Highcharts.seriesTypes.wordcloud.prototype.placementStrategy.random= randomPlacement;
```

Afterwards you can use the algorithm by specifying the option **series`<wordcloud>`.placementStrategy**:

```js
Highcharts.chart(..., {
  series: [{
    type: 'wordcloud',
    placementStrategy: 'random'
  }]
});
```

### Custom font sizing

The size of the font is calculated by the function `deriveFont`, which gives a result based on the relative weight of a word. The weight is on a scale 0-1, which indicates the words weight compared to the word with the largest weight.
When customizing the font sizes, you should be aware that higher font sizes can make the placement algorithm run slower, while a lower font size can make the placement of words more scattered.

```js
// Include this snippet after loading Highcharts and before Highcharts.chart is executed.
Highcharts.seriesTypes.wordcloud.prototype.deriveFontSize = function (relativeWeight) {
   var maxFontSize = 25;
  // Will return a fontSize between 0px and 25px.
  return Math.floor(maxFontSize * relativeWeight);
};
```

Things to be aware of
---------------------

*   When words are rotated in angles not divisible by 90, there is a lot of air between them.
    *   The current collision algorithm does not take rotation into count, and only checks if the outer areas of two words collides. To fix this we can utilize the [Separating Axis Theorem](https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169)
*   The words has changed places when I export my chart.
    *   The exporting does a new render of the data, which causes the words to be repositioned in different coordinates than the original chart.
*   There is a different font type in my exported chart.
    *   The current default font used in our Wordcloud series is not installed on the export server.



================================================
FILE: docs/chart-and-series-types/x-range-series.md
================================================
X-range series
===

The X-range series displays ranges on the X axis, typically time intervals with a start and an end date. X-range is the basic series of a Gantt chart.

An X-range is similar to a column range, but displays ranges in the X data where the column range displays lows and highs in the Y data. This allows X-ranges to be combined with other cartesian series types.

The X-range series requires the following module [modules/xrange.js](https://code.highcharts.com/modules/xrange.js).

_For more detailed samples and documentation check the [API.](https://api.highcharts.com/highcharts/plotOptions.xrange)_

<iframe style="width: 100%; height: 332px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/demo/x-range" allow="fullscreen"></iframe>

Click [here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/x-range/) to check the code.

Data structure
--------------

Each data point in an x-range is a range from an x value (typically start date) to x2 (typically the end date). Note that dates on a Highcharts datetime axis are given as milliseconds since 1970.

The `y` value of an x-range data point sets where to draw the range vertically. On a categorized y axis, this will reflect the category index.

Each data point may have a [`partialFill`](https://api.highcharts.com/highcharts/series.xrange.data.partialFill) option that sets how much of the task is fulfilled.

See the full set of options in the [API](https://api.highcharts.com/highcharts/plotOptions.xrange).



================================================
FILE: docs/chart-concepts/3d-charts.md
================================================
Getting started with Highcharts 3D support
===

Highcharts 3D is a Highcharts module providing limited 3D support to charts. It currently allows to create 3D Column charts, 3D Pie charts and 3D Scatter charts.

### Load the required files.

To be able to use Highcharts 3D you first have to load Highcharts as usual and load the additional [3D plugin module](https://code.highcharts.com/highcharts-3d.js):

```html
<script src="https://code.highcharts.com/highcharts-3d.js"><script>
````

(This should be included after highcharts.js)

### Configuring the 3D options for a chart.

Loading the 3D module will not alter existing charts unless they are specifically set up to be 3D, this allows you to have both 3D Charts and regular charts on one page. The configuration for the 3D chart in general is done the _chart_ section of the options, while some specific settings for different chart type can be found under _plotOptions_; here you see the fully extended 3D options with the type of value it expects:

```js
chart: {
    ....
    options3d: {
        enabled: 'boolean value',
        alpha: 'numeric value',
        beta: 'numeric value',
        depth: 'numeric value',
        viewDistance: 'numeric value',
        frame: {
            bottom: {
                size: 'numeric value',
                color: 'color value'
            },
            side: {
                size: 'numeric value',
                color: 'color value'
            },
            back: {
                size: 'numeric value',
                color: 'color value'
            }
       }
   },
   ...
}
...
plotOptions: {
    ...
    column: {
        ...
        depth: 'numeric value',
        groupZPadding: 'numeric value',
        ...
    },
    ...
    pie: {
        depth: 'numeric value'
    },
    ...
}
```

General
-------

For all 3D charts the following options are the most important (part of _chart.options3d_):

*   enabled                   This indicates whether the chart has to have 3D or not, set this to true.
*   depth                        The total depth of the chart, defaults to 100.
*   viewDistance          This defines how far a viewer is from the chart.
*   alpha & beta           The angles to rotate the view of the chart.

**Beware that setting a low _viewDistance_ can result in twisted effects in the perspective because the view point is too close to the chart.**

In _chart.options3d_ there is also the possibility to construct three panes around the chart called the _frame_, by default these panes are invisible but they can each be configured separately in _chart.options.3d.frame_:

```js
bottom|side|back: {
    size:   The thickness of the pane (defaults to 0)
    color:  The color of the pane (default to transparent)
}
```

3D Columns
----------

A 3D chart of type [columns](https://highcharts.com/docs/chart-and-series-types/column-chart) will draw each column as a cuboid and thus create a 3D effect. By default the depth of this column is set to 25. To define another depth you have to go into the _plotOptions_ and define one for the columns:

```js
plotOptions.column.depth: The depth of each individual column.
```

<iframe style="width: 100%; height: 550px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/3d-column-interactive" allow="fullscreen"></iframe>

### Displaying multiple columns

Just like in normal column charts, the Highcharts 3D plugin does allow to display a series of charts and to order these as desired using techniques like _grouping_ and _stacking_.

By default, _grouping_ is **true** in Highcharts, displaying the columns next to each other, in Highcharts 3D this is still the same: the columns will be standing next to each other on the front row of your chart. By setting _grouping_ to **false**, the columns will be placed behind each other in order of appearance. The default behaviour is to place the columns without any spacing against each other, this can be modified by setting the _groupZPadding_ option

```js
plotOptions.column.groupZPadding: Spacing between columns on the z-axis.
```

**Make sure the depth of the chart is sufficient to display all your columns. You will need at least the following depth: number of columns * (depth of column + z-padding)**

A regular Highcharts column chart also offers the possibility to stack columns together, this is of course still available in 3D charts and works in exactly the same way by setting _stacking_ to **true** and defining a stack number for each series.

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/3d-column-stacking-grouping" allow="fullscreen"></iframe>

3D Pie
------

For a [pie chart](https://highcharts.com/docs/chart-and-series-types/pie-chart) the depth of the total chart is not important and setting the frame does not do anything (the frame is linked to the axis line and pies do not have these in the same way the other charts have). For pie charts it is important to set the depth property in _plotOptions_.

```js
plotOptions.pie.depth: Defines the 'thickness' of the pie.
```

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/3d-pie" allow="fullscreen"></iframe>

3D Scatter
----------

In addition to x & y coordinates like in a regular [scatter chart](https://highcharts.com/docs/chart-and-series-types/scatter-chart), the 3D plugin adds an extra z coordinate to each point to place in 3 dimensions. Similar to the normal chart these coordinates can be sent either literally or using an array:


```js
{x: 1, y: 1, z: 1} is the same point as [1,1,1]
```

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/3d/scatter" allow="fullscreen"></iframe>

3D Area
----------

A 3D chart of type [area](https://highcharts.com/docs/chart-and-series-types/area-chart) is working similar to the column series. It will draw each area series as a 3D plane. By default the depth of an area series is set to 25.

### Displaying multiple areas

Just like in normal area charts, the Highcharts 3D plugin does allow to display multiple area series and to order these as desired with _grouping_ and _stacking_.

**Make sure the depth of the chart is sufficient to display all your area series. You will need at least the following depth: (number of area series - 1) * (depth of single area series)**

Stacking is still available in 3D charts and works in exactly the same way by setting _stacking_ to **true**.

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/demo/3d-area-multiple" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-concepts/axes.md
================================================
Axes
====

The x-axis and y-axis are shown by default in all charts containing data series
with a [cartesian coordinate system](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#cartesian-coordinate-system).
Here is a quick overview of the axis elements:

![axis_description.png](axis_description.png)

Axis labels, tickmarks and gridlines
------------------------------------

The axis labels, tickmarks and gridlines are closely linked and all scale together. Their positioning is calculated to best fit the data present in a chart. 

### Ticks

Tick marks are the lines placed along an axis to show the units of measurement. The spacing between ticks are mainly decided by the [tickInterval](https://api.highcharts.com/highcharts/xAxis.tickInterval) and [tickPixelInterval](https://api.highcharts.com/highcharts/xAxis.tickPixelInterval) options. Labels and grid lines are laid out on the same positions as the tick marks. 

The `tickInterval` option decides the interval of the tick marks in axis units. The tick interval defaults to null, which means it is computed to approximately follow the `tickPixelInterval` on linear and datetime axes.

On **categorized** axes, a null `tickInterval` will default to 1, one category.

Note that **datetime** axes are based on milliseconds, so for example an interval of one day is expressed as 24 \* 3600 \* 1000. 

On **logarithmic** axes, the `tickInterval` is based on powers, so a `tickInterval` of 1 means one tick on each of 0.1, 1, 10, 100 etc. A `tickInterval` of 2 means a tick of 0.1, 10, 1000 etc. A `tickInterval` of 0.2 puts a tick on 0.1, 0.2, 0.4, 0.6, 0.8, 1, 2, 4, 6, 8, 10, 20, 40 etc.

The `tickPixelInterval` option sets an approximate pixel interval of the tick marks based on a pixel value (if `tickInterval` is nullish). This makes it work well with responsive layouts, ensuring a reasonable distance between ticks regardless of the chart size and axis length. It doesn't apply to categorized axis. Defaults to 72 for the y-axis and 100 for the x-axis.

### Minor ticks

If the [minorTickInterval](https://api.highcharts.com/highcharts/xAxis.minorTickInterval) option is set, minor ticks are laid out between the major ones. This includes minor tick marks, and minor grid lines, which have their own options for look and feel, but excludes labels.

### How are ticks calculated in Highcharts?
Highcharts offers several options to control the appearance and placement of ticks on axes. By default, the axis extremes and tick positions are calculated so that all data values fit inside the chart. Ticks are placed at “round” values (like 1, 2, 5, 10, 20, 50, etc. for linear axes, or minute, hour, month, etc. for datetime axes). This makes charts easier to read and interpret.
For example, if your data’s minimum is 2 and maximum is 16, the y-axis might automatically span from 0 to 20, with ticks at 0, 5, 10, 15, and 20. This default behavior can be modified using several options.

#### Controlling tick placement
 -   ​`tickInterval`​: Sets the interval between ticks to a fixed value.
 -   ​`tickPixelInterval`​: Sets the approximate pixel distance between ticks. This helps with responsive layouts.
 -   ​`tickPositions​`:
    Explicitly sets the tick positions using an array of values. This overrides automatic calculation and the options above.
 -   ​`tickPositioner`​: A callback function that returns an array of tick positions, allowing for full customization.

#### Axis extremes and ticks
By default, axes will start and end on a tick. This means the axis minimum and maximum are rounded to the nearest tick values. You can control this behavior using the `startOnTick` and `endOnTick` options. These options can even override explicit `min` and `max` settings, so the axis begins and ends on neat tick values.
#### Related options
There are several additional options that affect tick calculation and axis extremes:
-   [`alignTicks`](https://api.highcharts.com/highcharts/xAxis.alignTicks)
-   [`ceiling`](https://api.highcharts.com/highcharts/xAxis.ceiling)
-   [`floor`](https://api.highcharts.com/highcharts/xAxis.floor)
-   [`max`](https://api.highcharts.com/highcharts/xAxis.max)
-   [`min`](https://api.highcharts.com/highcharts/xAxis.min)
-   [`minTickInterval`](https://api.highcharts.com/highcharts/xAxis.minorTickInterval)
-   [`minRange`](https://api.highcharts.com/highcharts/xAxis.minRange)
-   [`softMax`](https://api.highcharts.com/highcharts/xAxis.softMax)
-   [`softMin`](https://api.highcharts.com/highcharts/xAxis.softMin)
-   [`startOnTick`](https://api.highcharts.com/highcharts/xAxis.startOnTick)
-   [`tickAmount`](https://api.highcharts.com/highcharts/xAxis.tickAmount)
-   [`tickInterval`](https://api.highcharts.com/highcharts/xAxis.tickInterval)
-   [`tickPixelInterval`](https://api.highcharts.com/highcharts/xAxis.tickPixelInterval)
-   [`tickPositioner`](https://api.highcharts.com/highcharts/xAxis.tickPositioner)
-   [`tickPositions`](https://api.highcharts.com/highcharts/xAxis.tickPositions)

### Labels

The axis labels can be found along the axis showing the value of the data it corresponds to. Labels can also be customized using a format string or a formatter function:

```js
yAxis: {
    labels: {
        format: '{value}%', // provides the same result as:
        formatter: function() {
            return this.value + ' %';
        }
    },
},
```

The above example takes the value of the y-axis label and adds a % symbol at the end of it.

### Grid lines

Grid lines are collections of horizontal (and/or vertical) lines that divide a chart into a grid, making it easier to read values of the chart. 

To enable or disable gridlines for either the x or y-axis, set the [gridLineWidth](https://api.highcharts.com/highcharts/xAxis.gridLineWidth) of the respective axis:


```js
xAxis: {
    gridLineWidth: 1
},
yAxis: {
    gridLineWidth: 1
}
```


Grid lines for the y-axis are enabled by default (`gridLineWidth: 1`), and disabled by default for the x-axis  (`gridLineWidth: 0`).

Other options for grid lines can be found in the [API reference](https://api.highcharts.com/highcharts/xAxis) for the x and y-axis.

Minor grid lines are intermediary lines that can be enabled by setting the [minorTickInterval](https://api.highcharts.com/highcharts/xAxis.minorTickInterval) option.

Multiple axes
-------------

It is possible to have multiple axes and linking them with different data series. To do this several axes needs to be created, like this:

```js
yAxis: [{ //--- Primary yAxis
    title: {
        text: 'Temperature'
    }
}, { //--- Secondary yAxis
    title: {
        text: 'Rainfall'
    },
    opposite: true
}],

series: [{
    yAxis: 0,
    data: [
        49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1,
        95.6, 54.4
    ]
},{
    yAxis: 1,
    data: [
        7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6
    ]
}]
```


Note that several axes are created using a list, so the first `yAxis` starts with index 0. And the `opposite: true` option puts the axis on the right side of the chart.

### Align ticks

When using multiple axes, it is usually desirable to align the ticks, to avoid multiple sets of grid lines to mess up the chart. The [chart.alignTicks](https://api.highcharts.com/highcharts/chart.alignTicks) option is `true` by default. The downside of alignment is that each axis is pre-determined to have the same tick amount as the others, so the fitting of ticks may not be optimal. An alternative is to turn off `alignTicks` and set `gridLineWidth` to 0.

### Align thresholds

Since v10, it is possible to align the [thresholds](https://api.highcharts.com/highcharts/series.line.threshold) of multiple axes through the [chart.alignThresholds](https://api.highcharts.com/highcharts/chart.alignThresholds) option. This is similar to `alignTicks` but goes one step further by also ensuring zero-levels or other kinds of thresholds are aligned.

Axis title 
-----------

The axis title, showing next to the axis line. This title by default for the y-axis and hidden by default for the x-axis. See [xAxis.title](https://api.highcharts.com/highcharts/xAxis.title) for the full set of options.

Axis types
----------

An axis can be either, linear, logarithmic, datetime or categories. The axis type is set like this:

```js
// The types are 'linear', 'logarithmic' and 'datetime'
yAxis: {
    type: 'linear',
}

// Categories are set by using an array
xAxis: {
    categories: ['Apples', 'Bananas', 'Oranges']
}
```

### Linear

The numbers along the axis are of linear scale. This is the default axis type. If only y-values are present in a dataseries the x-axis is labeled from 0 to the number of y-values (shows the array index of the y-values):

```js
var chart = new Highcharts.Chart({
    chart: {
        renderTo: 'container',
        type: 'column'
    },
    title: {
        text: 'Fruit Consumption'
    },
    xAxis: {
        title: {
            text: 'Fruit Number'
        },
        tickInterval: 1
    },
    yAxis: {
        title: {
            text: 'Fruit eaten'
        },
        tickInterval: 1
    },
    series: [{
        name: 'Jane',
        data: [1, 0, 4]
    }, {
        name: 'John',
        data: [5, 7, 3]
    }]
}});
```

![linear_example.png](linear_example.png)

### Logarithmic

On a logarithmic axis the numbers along the axis increase logarithmically and the axis adjusts itself to the data series present in the chart.

Note that on logarithmic axes, the [tickInterval](https://api.highcharts.com/highcharts/yAxis.tickInterval) option is based on powers, so a tickInterval of 1 means one tick on each of 0.1, 1, 10, 100 etc. A tickInterval of 2 means a tick of 0.1, 10, 1000 etc. A tickInterval of 0.2 puts a tick on 0.1, 0.2, 0.4, 0.6, 0.8, 1, 2, 4, 6, 8, 10, 20, 40 etc.

Another thing to note is that a logarithmic axis can never become negative, as each full axis unit is one tenth of the previous. As a consequence, Highcharts will remove 0 or negative points associated to the axis, and if you try to set the [axis.min](https://api.highcharts.com/highcharts/yAxis.min) option to 0 or negative, it will fail with an error.

#### A trick to plot zero and negative values on a logarithmic axis in Highcharts

Let's begin by delving into the core concept of logarithms. When we have an equation like 10 raised to the power of L equals Z, we say that L is the logarithm with a base of 10 for Z. If L is a negative number, this implies that Z is a positive fraction smaller than 1.0. In the case where L equals zero, Z is precisely 1.0. On the other hand, if L is greater than 0, then Z exceeds 1.0. It's essential to emphasize that no matter the value of L, it's impossible for Z to be zero or negative. Logarithms do not have defined values for such cases, they exclusively operate on positive numbers.

If you would like to show zero and negative values on a logarithmic axis in Highcharts, the only viable approach is to employ a custom plugin. This plugin allows for the emulation of negative values on a logarithmic axis. It's important to bear in mind that the resulting scale is not mathematically precise since a true logarithmic axis never touches or crosses zero. The custom plugin can be [found in this demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/yaxis/type-log-negative/).

### Datetime

A datetime axis prints labels of round date values in appropriate intervals. Internally, a datetime axis is a linear numeric axis based on milliseconds since midnight Jan 1, 1970, as specified by the JavaScript Date object. Depending on the scale the datetime label will either be represented as time or a date.

On datetime axes, all time settings may be given either as milliseconds, date strings (since v12), or Date objects. This includes options like `min` and `max`, arguments to `Axis.setExtremes`, as well as related options like `point.x` and `series.pointStart`.

#### Timezone handling
By default, Highcharts uses UTC for all date-time axes. You can control how dates are interpreted and displayed by setting the chart-level [time.timezone](https://api.highcharts.com/highcharts/time.timezone) option. Date strings without a timezone are interpreted in this timezone. If a date string contains a timezone offset, that offset is respected.

Tip:​ For consistent behavior across all users and time zones, we recommend using ISO date strings (e.g., `2024-01-31`) or UTC timestamps (`Date.UTC(...)`). Avoid using local JavaScript `Date` objects (e.g., `new Date(2024, 0, 31)`) for axis values, as these depend on the user's local timezone and may produce unexpected results, especially near month boundaries.

In Highcharts Stock the x-axis is always a datetime axis.

### Categories

If categories are present, the names of the categories are used instead of numbers or dates on the axis. See [xAxis.categories](https://api.highcharts.com/highcharts/xAxis.categories).

### What axis type should I use?

Many of the examples on the [Highcharts demo page](https://highcharts.com/demo/) come with an xAxis with categories. However, it is important to understand when to use categories and when you are better off with a linear or datetime xAxis.

Categories are groups of items, like for example "Apples", "Pears" and "Oranges", or "Red", "Green", "Blue", "Yellow". These categories have that in common that there are no intermediate values. There's no sliding transition between apples and pears. Also, if you leave one category out, the user isn't able to understand what is left out. Say if you print every second color of "Red", "Green", "Blue" or "Yellow", the user won't know what colors are missing. Therefore, Highcharts doesn't have automatic methods to hide categories if they become to dense on the axis. If you have problems with overlapping axis labels, try either the [xAxis.labels.staggerLines](https://api.highcharts.com/highcharts/xAxis.labels.staggerLines) option, or give the labels a rotation. If you find that you can skip category labels by the [xAxis.labels.step](https://api.highcharts.com/highcharts/xAxis.labels.step) option, chances are that you are better off using a linear or datetime axis.

An xAxis of the linear or datetime type has the advantage that Highcharts is able to determine how close the data labels should be because it knows how to interpolate. The labels will by default be placed with approximately 100px between them, which can be changed in the tickPixelInterval option. If you have predictable categories like "Item1", "Item2", "Item3" or "2012-01-01", "2012-01-02", "2012-01-03" etc., linear or datetime axis types combined with an [xAxis.labels.formatter](https://api.highcharts.com/highcharts/xAxis.labels.formatter) would probably be a better choice.

Dynamically updating axes
-------------------------

Axes can be updated with new information after render time. For more information about this look in the [API](https://api.highcharts.com/highcharts/Axis).



================================================
FILE: docs/chart-concepts/bubble-legend.md
================================================
Bubble legend
===

## Introduction

A bubble legend is an additional element, which can be added in any position in the chart legend. The bubble legend allows to present the scale of the bubble series in a simple and transparent way.

**Demo with autoranges**

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/bubble-legend/autoranges" allow="fullscreen"></iframe>

**Demo with the bubble legend styled in a similar way to the series**

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/bubble-legend/similartoseries" allow="fullscreen"></iframe>

**Demo with ranges**

<iframe style="width: 100%; height: 450px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/bubble-legend/ranges" allow="fullscreen"></iframe>

Installation
------------

Requires `highcharts-more.js`. To display a bubble legend, set `legend.bubbleLegend.enabled` to `true`.

Configuration
-------------

The code of `bubbleLegend` is very simple to set, and it allows a lot of customization. The part of the options like [minSize,](https://api.highcharts.com/highcharts/legend.bubbleLegend.minSize) [maxSize, ](https://api.highcharts.com/highcharts/legend.bubbleLegend.maxSize)[sizeBy](https://api.highcharts.com/highcharts/legend.bubbleLegend.sizeBy), and the size calculation method works in the same way as in a [bubble series.](https://api.highcharts.com/highcharts/plotOptions.bubble)

Default style settings are taken from the first visible bubble series. The position of the bubble legend element on the chart is defined by the legend position.

Use Cases
---------

There are two ways to add the bubble legend to the chart:

**1. Automatic**: without defining ranges. Creates three bubbles in the legend, the smallest and the biggest have the same dimensions and value as their counterparts in bubble series (all bubble series are included). The middle bubble has an average value of the other two. If there is only one bubble point on the chart, the bubble legend will also have only one bubble.

```js
{
    chart: {
        type: 'bubble'
    },
    legend: {
        bubbleLegend: {
            enabled: true
        }
    },
    series: [{
        data: [
            [9, 81, 63],
            [98, 5, 89],
            [51, 50, 73],
            [41, 22, 14],
            [58, 24, 20]
        ]
    }]
}
```

**2. Custom**: with manually defined ranges. Bubbles are calculated based on `ranges`, `minSize`, and `maxSize`, bubble series dimensions are not included.

```js
{
    chart: {
        type: 'bubble'
    },
    legend: {
        bubbleLegend: {
            enabled: true,
            minSize: 20,
            maxSize: 60,
            ranges: [{
                value: 14
            }, {
                value: 89
            }]
        }
    },
    series: [{
        minSize: 20,
        maxSize: 60,
        data: [
            [9, 81, 63],
            [98, 5, 89],
            [51, 50, 73],
            [41, 22, 14],
            [58, 24, 20]
        ]
    }]
}
```

API document
------------

For more details check the [API documentation](https://api.highcharts.com/highcharts/legend.bubbleLegend).



================================================
FILE: docs/chart-concepts/dataviz-glossary.md
================================================
# Dataviz Glossary

The Dataviz Glossary provides concise definitions of key terms and concepts
commonly used in data visualization. Whether you're new to charting or looking
to refresh your understanding of specific terms, this glossary serves as a quick
reference to enhance your knowledge and improve communication within the field
of data visualization.

### Cartesian coordinate system
- **Definition:** A coordinate system that specifies each point uniquely using a
pair of numerical values, typically denoted as (x, y), representing horizontal
and vertical positions on a two-dimensional plane.
- **Example:** Line and column charts in Highcharts commonly use the Cartesian
coordinate system to map data points.
- **Related Highcharts concepts:** [Axes](https://www.highcharts.com/docs/chart-concepts/axes),
[Series](https://www.highcharts.com/docs/chart-concepts/series).

### Choropleth map
- **Definition:** A thematic map that uses differences in shading, coloring, or
patterns within predefined areas (e.g., countries or regions) to represent the
magnitude of a variable, such as population density or income levels.  
- **Example:** A map showing average rainfall levels across regions, where
darker shades indicate higher rainfall.
- **Related Highcharts concepts:** [Map series](https://www.highcharts.com/docs/maps/map-series),
[Color axis](https://www.highcharts.com/docs/maps/color-axis).

### Mosaic plot
- **Definition:** A graphical display that uses rectangular segments to
represent categorical data. The area of each segment is proportional to the
frequency or proportion of the categories it represents. Also known as
**Marimekko** or **Mekko** chart.
- **Example:** Mosaic plots are used to display multi-dimensional categorical
data, where each rectangle size visually indicates the relationship between
different variables.
- **Related Highcharts concepts:** [Variwide series](https://www.highcharts.com/docs/chart-and-series-types/variwide-chart),
[Treemap series](https://www.highcharts.com/docs/chart-and-series-types/treemap).

### Tree (data structure)
- **Definition:** A hierarchical data structure used to organize elements in a
parent-child relationship. Each element, called a node, can have multiple child
nodes but only one parent (except for the root node, which has none).
- **Example:**  Used to represent relationships such as organizational charts or
file directories. Tree maps and sunburst charts use tree data structures to
represent nested data.
- **Related Highcharts concepts:** [Treemap series](https://www.highcharts.com/docs/chart-and-series-types/treemap),
[Treegraph series](https://www.highcharts.com/docs/chart-and-series-types/treegraph-chart),
[Sunburst series](https://www.highcharts.com/docs/chart-and-series-types/sunburst-series).



================================================
FILE: docs/chart-concepts/drilldown.md
================================================
Drill down
==========

For full detailed documentation and more samples of the drilldown feature, see [the Highcharts API](https://api.highcharts.com/highcharts/drilldown).

Since version 3.0.8, Highcharts has built-in support for drilldown. By giving a point configuration a drilldown option that corresponds to a series configuration in the `drilldown.series` array, the point is linked to a hidden series. When the point is clicked, this series is loaded in the chart and replaces the existing series. For column, bar and pie series, an animation occurs to help visualize that the single clicked point is extracted into a drilldown series. Multiple levels of drilling can be applied by chaining points to series.

### Basic setup

For a basic setup, the drilldown series are defined in a separate array under the `drilldown` configuration. Each series configuration is given an id, which is used for the drilldown parent point to identify its series. 

```js
series: [{
    name: 'Things',
    colorByPoint: true,
    data: [{
        name: 'Animals',
        y: 5,
        drilldown: 'animals'
    }, {
        name: 'Fruits',
        y: 2,
        drilldown: 'fruits'
    }, {
        name: 'Cars',
        y: 4,
        drilldown: 'cars'
    }]
}],
drilldown: {
    series: [{
        id: 'animals',
        data: [
            ['Cats', 4],
            ['Dogs', 2],
            ['Cows', 1],
            ['Sheep', 2],
            ['Pigs', 1]
        ]
    }, {
        id: 'fruits',
        data: [
            ['Apples', 4],
            ['Oranges', 2]
        ]
    }, {
        id: 'cars',
        data: [
            ['Toyota', 4],
            ['Opel', 2],
            ['Volkswagen', 2]
        ]
    }]
}
```

See it [live on jsFiddle](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/drilldown/basic/).

### Async setup

In many cases you may want to load the drilldown series dynamically. In this case we set the `point.drilldown` option to true, and use the chart's drilldown event to load the drilldown series configuration based on the clicked point. When the series data arrives, we add it by calling the [Chart.addSeriesAsDrilldown](https://api.highcharts.com/class-reference/Highcharts.Chart#addSeriesAsDrilldown) method.

See the [async drilldown](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/drilldown/async/) demo.



================================================
FILE: docs/chart-concepts/labels-and-string-formatting.md
================================================
Labels and string formatting
============================

Anywhere in Highcharts where text strings occur, they allow modification by _formatters_ or _format_ options. All format string options have matching formatter callbacks. While formatter callbacks have greater flexibility, format strings are typically more compact, and they are JSON compatible.

### HTML in Highcharts

Texts and labels in Highcharts are given in HTML, but as the HTML is parsed and rendered in SVG, only a subset is supported. The following tags are supported: `<a>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<br/>`, `<span>`. Spans can be styled with a style attribute, but only text-related CSS that is shared with SVG is handled.

Most places where text is handled in Highcharts, it is also followed by an
option called `useHTML`. When this is true, the text is laid out as HTML on top
of the chart. This allows for full HTML support and can be a good idea if you
want to add images in your labels, tables in your tooltip etc.

Prior to Highcharts v12.2, the downsides are:

*   It will always be laid out on top of all other SVG content. Specifically the
    tooltip may be rendered below the _useHTML_ label, unless
    [tooltip.outside](https://api.highcharts.com/highcharts/tooltip.outside) is
    set to true.
*   It is not rendered the same way in exported charts, unless you use the
    experimental
    [exporting.allowHTML](https://api.highcharts.com/highcharts/exporting.allowHTML)
    option.

Since v12.2, we implemented an experimental feature to render HTML inside
`foreignObject` elements in SVG. This fixed the z-index issue, and works across
all modern browsers. Our goal is to make this the default behavior, but want to
try it out behind a flag first. To enable this feature, set
`Highcharts.HTMLElement.useForeignObject` to true. See the [live demo of
`useHTML` with foreign
object](https://highcharts.com/samples/highcharts/members/renderer-usehtml-foreignobject).

For the default behavior (a parallel HTML structure outside the SVG), see the
[live demo of
`useHTML`](https://highcharts.com/samples/highcharts/members/renderer-usehtml)
in some common elements.

Using HTML also works around some older browser bugs with bi-directional text.
Read more
under [Internationalization](https://highcharts.com/docs/advanced-chart-features/internationalization).

### Filtering
For security reasons, Highcharts since version 9 filters out unknown tags and attributes. See [the security page](https://highcharts.com/docs/chart-concepts/security) for details.

If your config comes from a trusted source, you may add tags, attributes or reference patterns to the allow lists:
```js
Highcharts.AST.allowedTags.push('blink');
Highcharts.AST.allowedAttributes.push('data-value');
// Allow links to the `tel` protocol
Highcharts.AST.allowedReferences.push('tel:');
```

### Format strings

Format strings are templates for labels. Since v11.1 the format strings support logic. We recommend using format strings if you
* Need to save the chart configuration to JSON.
* Need to provide a GUI for end users so that callbacks are not practical, or XSS is a concern.
* Need to send the charts over to our export server to execute (all callbacks are stripped out).
* Are creating a wrapper for another programming language than JavaScript.

Examples of format strings are [xAxis.labels.format](https://api.highcharts.com/highcharts/xAxis.labels.format), [tooltip.pointFormat](https://api.highcharts.com/highcharts/tooltip.pointFormat) and [legend.labelFormat](https://api.highcharts.com/highcharts/legend.labelFormat). 

For a full overview over templating in format strings, read the [Templating](https://www.highcharts.com/docs/chart-concepts/templating) article.

### Formatter callbacks

For full control over string handling and additional scripting capabilities around the labels, you might need to use formatter callbacks. These formatters return HTML (subset). Examples of these are [xAxis.labels.formatter](https://api.highcharts.com/highcharts/xAxis.labels.formatter), [tooltip.formatter](https://api.highcharts.com/highcharts/tooltip.formatter) and [legend.labelFormatter](https://api.highcharts.com/highcharts/legend.labelFormatter). Often times you'll need to call [Highcharts.dateFormat()](https://api.highcharts.com/class-reference/Highcharts.Time#dateFormat) and [Highcharts.numberFormat()](https://api.highcharts.com/class-reference/Highcharts#.numberFormat) from the formatters.





================================================
FILE: docs/chart-concepts/legend.md
================================================
Legend
======

The legend displays the series in a chart with a predefined symbol and the name of the series. Series can be disabled and enabled from the legend.

![legend.png](legend.png)

For more information see the [API reference](https://api.highcharts.com/highcharts/legend) for legend options.


================================================
FILE: docs/chart-concepts/plot-bands-and-plot-lines.md
================================================
Plot bands and plot lines
=========================

Plot lines and plot bands are quite similar in use. They both have the option of color, events, id, label and zIndex. The lines and bands will always be perpendicular to the axis it is defined within. With the use of a polar chart or gauge this will create interesting examples which are described later. When a plot band/line is used on both the x- and y-axis, the plot band/line on the y-axis will be shown in front, as seen in the example below. 

![Image of plot bands and plot lines](plot_bands_and_plot_lines.png)

Plot bands can be created either on the x-axis or the y-axis. It can also be created on both axes:

```js
xAxis: {
  ...,
  plotBands: [{
    color: 'orange', // Color value
    from: 3, // Start of the plot band
    to: 4 // End of the plot band
  }],
  plotLines: [{
    color: 'red', // Color value
    dashStyle: 'longdashdot', // Style of the plot line. Default to solid
    value: 3, // Value of where the line will appear
    width: 2 // Width of the line
  }]
},
yAxis: {
  ...,
  plotBands: [{
    ... // Same as in the xAxis
  }],
  plotLines: [{
    ... // Same as in the xAxis
  }]
}
```

Labels
------

The plot bands and plot lines have the option of containing a label. This is a text which will be shown on top of the band or line.

![Image of label](labels_in_plot_bands_and_lines.png)

To create labels for plot bands or lines you can add the object "label":

```js
plotBands: {
  ...,
  label: {
    text: 'I am a label', // Content of the label.
    align: 'left', // Positioning of the label. Default to center.
    x: +10 // Amount of pixels the label will be repositioned according to the alignment.
  }
}
```

Events

"events" are an object which can be created inside a plot band or plot line object. This object defines mouse events according to the band or line. Values that are supported are click, mouseover, mouseout and mousemove.

```js
plotBands: {
  ...,
  events: {
    click: function () {
      // Action performed when event occurs
    },
    mouseover: function () {
      // Action performed when event occurs
    },
    mouseout: function () {
      // Action performed when event occurs
    },
    mousemove: function () {
      // Action performed when event occurs
    }
  }
}
```

[Example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/xaxis/plotbands-events/) of how events can be used.

Dynamically update
------------------

After render time a chart can be updated with new plot bands or lines, or if you want some can be removed. This is done by using the functions addPlotBand(), addPlotLine(), removePlotBand() or removePlotLine(). With use of these functions the chart allows for interaction with the user. 

When removing a plot band or line it is critical that the object which should be removed has been given an id. Without it the object cannot be recognized and the function cannot be executed.

Some simple examples of how a plot band can be [added](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/members/axis-addplotband/) to the chart and how it can be [removed](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/xaxis/plotbands-id/).

Plot bands and lines in polar charts and gauges
-----------------------------------------------

With a plot band in a polar chart or a gauge, the band will form as a concentric circle around the chart.  When used inside the x-axis of a polar chart the band will wrap around the outer corner of the chart. With the y-axis it will form a circle and fill the given area. Inside a gauge the band will wrap around the outer corner of the chart. The plot line will form as a straight line when used within the x-axis, and as a concentric circle used within the y-axis.

![plot_bands_in_polar_chart.png](plot_bands_in_polar_chart.png)

Plot bands and plot lines examples
----------------------------------

*   [Spline with plot bands](https://highcharts.com/demo/spline-plot-bands)
*   [Spline with dashed and dotted plot lines](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/xaxis/plotlines-dashstyle/)
*   [Removing a plot band](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/xaxis/plotbands-id/)
*   [Toggle plot band](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/members/axis-addplotband/)

For more information and examples look in the api for [plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands), [plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines), [addPlotBand](https://api.highcharts.com/highcharts/Axis.addPlotBand) and [addPlotLine](https://api.highcharts.com/highcharts/Axis.addPlotLine).



================================================
FILE: docs/chart-concepts/responsive.md
================================================
Responsive charts
===

Since Highcharts 5.0 you can create responsive charts much the same way you work with responsive web pages. A top-level option, [responsive](https://api.highcharts.com/highcharts/responsive), exists in the configuration.

It lets you define a set of rules, each with a [condition](https://api.highcharts.com/highcharts/responsive.rules.condition), for example _maxWidth: 500_, and a separate set of [chartOptions](https://api.highcharts.com/highcharts/responsive.rules.chartOptions) that is applied on top of the general chart options. The _chartOptions_ work as overrides to the regular chart options, which apply when the rule applies. For example, the following rule will hide the legend for charts less than 500 pixels wide: 

```js
responsive: {
  rules: [{
    condition: {
      maxWidth: 500
    },
    chartOptions: {
      legend: {
        enabled: false
      }
    }
  }]
}
```

One of the most handy options is [chart.className](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/responsive/classname/) that can be used to control the style of all other elements in Highcharts [styled mode](https://www.highcharts.com/docs/chart-design-and-style/style-by-css).

In general, the _responsive_ configuration lets you define size-dependent settings for all aspects of the chart. Typical use could be to [move the legend](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/responsive/legend/) or modify how much space [the axes take up](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/responsive/axis/). Responsiveness is also a great concept in charts with many graphical elements, like [stock charts](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/stock/demo/responsive/).

Watch what happens to the legend in this sample as you scale up or down the browser window size:

<iframe style="width: 100%; height: 500px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/responsive/legend" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-concepts/scrollbar.md
================================================
Scrollbars
===

There are two major approaches to scrollbars in Highcharts.

1. Native scrollbars for mobile
--------------------------------

These scrollbars are applied by setting a [scrollablePlotArea with a minWidth](https://api.highcharts.com/highcharts/chart.scrollablePlotArea.minWidth). When the width of the plot area becomes less than this, it is applied to a separate div in the page, where native, smooth scrolling is applied, while the axes, titles, legend and other elements stay fixed. This provides a great way to support long data series in a narrow mobile view. See the effect below in a mobile browser or just a small desktop browser window.

<iframe style="width: 100%; height: 460px; border: none;" src="https://www.highcharts.com/samples/embed/highcharts/chart/scrollable-plotarea/" allow="fullscreen"></iframe>

2. Axis scrollbars through an API option
-----------------------------------------

These scrollbars are enabled per axis and appear next to the axis. Scrollbars can be applied to any axis in Highcharts Stock.

The full documentation and available options can be seen in our [API docs](https://api.highcharts.com/highstock/yAxis.scrollbar) for Highcharts Stock.

Scrollbars are not limited to stock charts or Y axis. Using the _highstock.js_ file, it can be applied to regular Highcharts axes too. See examples of:

*   [Scrollable bar chart](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/stock/yaxis/inverted-bar-scrollbar/)
*   [Heatmap with two scrollable axes (zoom in first)](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/stock/yaxis/heatmap-scrollbars/)
*   [Scrollable Y axis on stock chart (zoom in first)](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/stock/yaxis/scrollbar/)

<iframe width="100%" height="450" style="border: none;" src="https://www.highcharts.com/samples/embed/stock/yaxis/inverted-bar-scrollbar" allow="fullscreen"></iframe>



================================================
FILE: docs/chart-concepts/security.md
================================================
Highcharts Security
===

Adding HTML from an untrusted source into the DOM is a potential security risk, as it may execute unauthorized code in the browser. This is known as [cross-site scripting or XSS](https://en.wikipedia.org/wiki/Cross-site_scripting). Since Highcharts v9 we aim to filter all HTML that is added through the chart options structure - except function callbacks, which are already by definition executing code in the browser. Our design goal is that as long as the chart options are valid JSON, they should be XSS safe.

In practice we do this by using the browser's built-in `DOMParser` to parse incoming strings, transform the result into an [abstract syntax tree](https://api.highcharts.com/class-reference/Highcharts.AST), then check the tags and attributes against allow lists. Unknown tags and attributes are removed.

If your config comes from a trusted source, you may add tags, attributes or reference patterns to the allow lists:
```js
Highcharts.AST.allowedTags.push('blink');
Highcharts.AST.allowedAttributes.push('data-value');
// Allow links to the `tel` protocol
Highcharts.AST.allowedReferences.push('tel:');
```

You may also opt to bypass the filtering completely through the
[bypassHTMLFiltering](https://api.highcharts.com/class-reference/Highcharts.AST#.bypassHTMLFiltering)
flag.

Since v9.3.2 Highcharts supports [Trusted Types](https://web.dev/trusted-types/) under the built-in policy name `highcharts`. Our Cypress tests and developer tools are set up with Trusted Types enabled, which enforces an added layer of security and greatly reduces the risk for one of our developers to accidentally introduce a DOM XSS vulnerability.

### Scope
Chart _configuration options_ that are valid JSON are filtered for known XSS vectors. JSON support types of object, strings, numbers, arrays, boolean or null. This implies that function callbacks and event handlers in the chart options structure is not covered by our scope. Functions are inherently unsafe because they by nature allow scripting towards the web page.

Good: This option set is valid JSON, and the evil code is stripped out internally:
```js
Highcharts.chart('container', {
    "title": {
        // Filtered
        "text": "<a href='javascript:console.log(document.domain)'>Click me</a>"
    }
});
```

Bad: In this case the options set includes a function, and evil code may execute:
```js
Highcharts.chart('container', {
    "chart": {
        "events": {
            // Unsafe
            "load": () => console.log(document.domain)
        }
    }
});
```

Good: If we run the options through `JSON.parse`, it will throw on the arrow function, revealing that this is not valid JSON:
```js
const options = JSON.parse(`{
    "chart": {
        "events": {
            "load": () => console.log(document.domain)
        }
    }
}`); // => Throws SyntaxError
Highcharts.chart('container', options);
```

Good: The XSS filtering also applies to partial options given as parameters to functions that add or update chart elements:
```js
const chart = Highcharts.chart('container', {});
chart.setTitle({
    // Filtered
    text: "<a href='javascript:console.log(document.domain)'>Click me</a>"
});
```

### Backwards compatibility
In Highcharts prior to version 9, inputs were not filtered for XSS vectors. Some sporadic issues were handled, but all in all it should be considered giving direct access to the DOM. For example, when `useHTML` was true, any text strings or formats were passed directly to the DOM using `innerHTML`. Highcharts prior to version 9 assumed that the chart configuration was already checked for malicious code, as should any scripting content with user-defined input.

The changes brought to v9 were a deep refactoring of how the whole concept of pseudo HTML in SVG was handled. Therefore it is unfortunately not possible to backport the fix to earlier major versions.

If you are using earlier Highcharts versions, consider either of these points:

* The increased security only makes sense if you include content from untrusted sources in your charts. This may be user-defined chart titles, series names, point names, axis labels etc. - in short any text content that is rendered in the chart. If your chart configuration is static and trusted, there's no need for any action.
* Consider the architecture of your application. If the user-defined input is allowed to pass unfiltered to the point where it is inserted into a chart, sanitation should probably be added at an earlier stage, regardless of Highcharts version.
* Upgrade to Highcharts v9. It is fully backwards compatible and there is no need for changing any configuration.
* If you are not using any of the pseudo-HTML capabilities of Highcharts to format text inputs, stripping the texts of HTML is a simple way to filter out malicious code. See the example of [allow-listing characters](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/global/security-strip-html/). While this does not render gracefully, it does effectively strip out HTML.
* For more sophisticated sanitizing of the options, consider using a third party library like [DOMPurify](https://github.com/cure53/DOMPurify), either on the server or client side. See [the example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/global/security-strip-html-dompurify/). This will strip out malicious code in a fast and secure way, while maintaining harmless markup.

### Security reports and SAST code scanning

We take security seriously and strive to ensure the safety of our codebase. We encourage our users and the community to report any security vulnerabilities they discover using the information that on our [GitHub repository](https://github.com/highcharts/highcharts/security/policy). If you have discovered a security vulnerability or have any security-related concerns, please report them to us.

In addition to community reports, we also employ Static Application Security Testing (SAST) as part of our development workflow. SAST code scanning helps us identify and mitigate security risks by analyzing our codebase for potential vulnerabilities, such as common coding mistakes, insecure coding patterns, and known security issues.



================================================
FILE: docs/chart-concepts/series.md
================================================
Series
======

What is a series?
-----------------

A series is a set of data, for example a line graph or one set of columns. All data plotted on a chart comes from the series object. The series object has the structure:
```js
series: [{
    name: '',
    data: []
}]
```

Note: The series object is an array, meaning it can contain several series.

The name attribute gives the series a name, which shows up when hovering over the series in a chart and in the [legend](https://highcharts.com/docs/chart-concepts/legend).

The data in a series
--------------------

The actual data is represented as an array, by the data attribute, and can be presented in three ways:

1.  A list of numerical values. In this case, the numerical values will be interpreted as `y` values and the `x` values will be automatically calculated, either starting at 0 and incrementing by 1, or from the [pointStart](https://api.highcharts.com/highcharts/series.line.pointStart) and [pointInterval](https://api.highcharts.com/highcharts/series.line.pointInterval) options. If the axis has categories, these will be used. Example:

```js
data: [0, 5, 3, 5]
```

[Online example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/chart/reflow-true/)

2.  A list of arrays with two or more values. In this case, the first value is the x value and the second is the y value. If the first value is a date string and the x-axis is of type `datetime`, the string is parsed into a date. Otherwise if the first value is a string, it is applied as the name of the point, and the x value is incremented following the above rules. Some series, [like arearange](https://api.highcharts.com/highcharts/series.arearange.data), accept more than two values. See API documentation for each series type. Example:

```js
data: [[5, 2], [6, 3], [8, 2]]
```

[Online example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series/data-array-of-arrays/)

3.  A list of objects with named values. In this case the objects are point configuration objects as seen under options.point. The full list of available properties can be seen from the API, for [example for line series](https://api.highcharts.com/highcharts/series.line.data). Note that for this option to work in Highcharts Stock, the total number of points must not exceed the [turboThreshold](https://api.highcharts.com/highstock/series.line.turboThreshold), or the _turboThreshold_ setting must be increased. Example:

```js
data: [{
    name: 'Point 1',
    color: '#00FF00',
    y: 0
}, {
    name: 'Point 2',
    color: '#FF00FF',
    y: 5
}]
```


[Online example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series/data-array-of-objects/)

Point and marker
----------------

For [cartesian](https://www.highcharts.com/docs/chart-concepts/dataviz-glossary#cartesian-coordinate-system) charts, a point represents a (x, y) pair on the chart. Points can be given separate options inside the series data. For other chart types, the point represents other values than (x, y). For instance, in a range chart, the point represents (x, low, high). In an OHLC chart, the point represents (x, open, high, low, close). In a pie chart or gauge, the point represents a single value.

The point option can be applied to all charts. Here is an example showing how to edit the color of a specific point:

```js
series: [{
    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5,
            { y: 216.4, color: '#BF0B23'}, 194.1, 95.6, 54.4]
}]
```


Line, spline, area and areaspline charts have the option to display point markers, these are slightly different from the point option because they enable altering the style and shape of the point marker.

Here is an example showing how to alter the color and size of a marker on a specific point.

```js
series: [{
    data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5,
    {y: 216.4, marker: { fillColor: '#BF0B23', radius: 10 } }, 194.1, 95.6, 54.4]
}]
```


## Series options

The series options can be defined in two places within the Highcharts options structure.

*   General options that apply to multiple series are defined in the [plotOptions](https://api.highcharts.com/highcharts/plotOptions). To set general options for all series in the chart, use [plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series). To set general options for a specific chart type, each chart type has its own collection of plotOptions.
*   Specific options for each series are defined in the [series](https://api.highcharts.com/highcharts/series) options structure. All options that are listed for the plotOptions structure, can also be set in the specific series definition. Some options, like _data_, _id_ or _name_, only make sense for specific series.

Here is an overview over the most common options that can be applied to a data series:

### Animation

Allows disabling or altering the characteristics of the initial animation of a series. Animation is enabled by default.

### Color

Allows changing the color of a series.

### Point selection

Allows the selection and highlighting of a single point. Can be used to remove, edit or display information about a point.

![point_selection.png](point_selection.png)

[Try it here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-allowpointselect-line/)

Code to enable point selection:

```js
plotOptions: {
    series: {
        allowPointSelect: true
    }
}
```


Code to get the selected points:

```js
var selectedPoints = chart.getSelectedPoints();
```


### Line width

Allows altering the width of a line.

![linewidth_demo.png](linewidth_demo.png)

[Try it here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-linewidth-specific/)

Code to alter line width:

```js
series: [{
    data: [216.4, 194.1, 95.6],
    lineWidth: 5}],
```

### Stacking

Stacking allows series to be placed on top of each other without overlapping. See [Stacking charts](https://highcharts.com/docs/advanced-chart-features/stacking-charts) for more information.

### Cursor

Allows the cursor to change appearance to indicate that points and series are clickable.

### Data labels

Allows data labels to be displayed for each point of data in a series on the chart.

![datalabels_demo.png](datalabels_demo.png)

[Try it here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/line-labels/)

Code example showing how to enable datalabels:

```js
plotOptions: {
    line: {
        dataLabels: {
            enabled: true
        }
    }
},
```


Note: You may wish to disable mouse tracking, which highlights the series and points the mouse hovers over (tooltips will not show if mouse tracking is disabled).

The text displayed on datalabels may also be customized by using the formatter option. See [API reference](https://api.highcharts.com/highcharts/plotOptions.series.dataLabels) for more options.

### Dash style

Allows to use dashed lines instead of solid, there are several different dash options available.

![dashedline_demo.png](dashedline_demo.png)

[Try it here](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle/)

Code to set dashed lines for an individual series (the dashStyle can also be set in plotOptions):

```js
series: [{
    data: [1, 3, 2, 4, 5, 4, 6, 2, 3, 5, 6],
    dashStyle: 'longdash'
}]
```

### Zones

In some cases, you would want to display certain sections of the graph different. A common example is to use different colors when data falls in a certain range.  This effect can be achieved by using `zones`.  By default zoning is done on the yAxis, but this can be easily changed by setting the `zoneAxis` variable on the series.  For the zoning itself, you have to define an array called `zones` where each entry corresponds to a zone, delimited by a parameter `value`, which is the point up to which the zones goes. The settings that can be overwritten for each zone are color, fillColor and dashStyle.

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/series/color-zones-simple" allow="fullscreen"></iframe>

Code used for the zoning:

```js
zones: [{
    value: 0,
    color: '#f7a35c'
}, {
    value: 10,
    color: '#7cb5ec'
}, {
    color: '#90ed7d'
}]
```

Another common use of this is to style future, estimated data points differently.

<iframe style="width: 100%; height: 475px;" src="https://www.highcharts.com/samples/embed/highcharts/series/color-zones-dashstyle-dot" allow="fullscreen"></iframe>

Code used for the zoning:

```js
zoneAxis: 'x',
zones: [{
    value: 8
}, {
    dashStyle: 'dot'
}]
```

See the [API](https://api.highcharts.com/highcharts/plotOptions.series.zones) for more information.



================================================
FILE: docs/chart-concepts/templating.md
================================================
Templating
==========

Highcharts supports templating in format strings. Since v11.1 (2023) the templates support logic, and are generally [recommended](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#format-strings) over [formatter callbacks](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#formatter-callbacks) when the configuration needs to be secure and JSON compatible. The Highcharts templating style is inspired by well-proven languages like Handlebars and Mustache, but is more focused on numeric operations since charting is all about numeric data.

## Expressions
Expressions in format strings are enclosed by `{single brackets}`. They can be simple variables or constants, or conditional blocks or functions called _helpers_.

**Variables** and properties are inserted directly inside the bracket, for example `"The point value at {point.x} is {point.y}"`. Nested properties are supported using the dot notation. Arrays are also indexed using dot notation, for example `{series.xAxis.categories.0}`, or more practical, with a subexpression `{series.xAxis.categories.(point.x)}`

**Numbers** are formatted with a subset of float formatting conventions from the C library function `sprintf`. The formatting is appended inside the expression, separated from the value by a colon. Note that even though a dot and a comma symbolizes the decimal point and the thousands separator respectively, how it is actually rendered depends on the [language settings](https://api.highcharts.com/highcharts/lang). For example:

*   Two decimal places: `"{point.y:.2f}"` [[Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/two-decimal-places)]
*   Thousands separator, no decimal places: `{point.y:,.0f}` [[Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/no-decimal-places)]
*   Thousands separator, one decimal place: `{point.y:,.1f}` [[Demo, internationalized](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/one-decimal-place)]

**Dates** allow, like numbers, the format to be appended behind a colon. The format conventions allowed are the same as those of [Highcharts.dateFormat()](https://api.highcharts.com/class-reference/Highcharts.Time#dateFormat). For example:

*   Full date: `{value:%Y-%m-%d}` [[Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/full-date)]
*   Locale-aware full date: `{value:%[Ymd]}` [[Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/full-date)]

## Helpers
Helpers define either a conditional block or a function to be used in an expression. Highcharts includes a number of [built-in helpers](#built-in-helpers), and allows custom helpers to be added.

```js
// Add two literal number using the `add` helper
format: '{add 1 2}' // => prints 3

// Add a literal number and a variable
format: '{add point.index 1}' // => prints a 1-based index from zero-based
```

**Block helpers** include a block that is executed conditionally. Block helpers start with a `#`, and end with a closing expression. They may also include an `{else}` expression to execute if the condition is falsy.
```js
// A simple #if helper
format: '{#if point.isNull}Null{else}{point.y:.2f} USD{/if}'

// A block helper looping through points, with nested expressions
format: '{#each points}{add this.index 1}) {this.name}<br>{/each}
```
[See demo of an #each helper in a shared tooltip](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/tooltip/format-shared).

**Custom helpers** can be defined by extending `Highcharts.Templating.helpers`. Each helper has a fixed number of arguments. A `match` object is then appended to the arguments, for use in case a block helper needs access to the context or the body of the block. Helpers can either return a boolean, in which case the helper works as a condition, or a string or number, in which case that is inserted for the whole block or expression.

```js
// Define a helper to return the absolute of a number
Highcharts.Templating.helpers.abs = value => Math.abs(value);

// Use it like this
format: 'Absolute value: {abs point.y}'
```
[View live demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/bar-negative-stack).

## Subexpressions
Subexpressions provide a powerful way to invoke multiple helpers, and pass the results of the inner helper to the outer helper. Subexpressions are delimited by parentheses.

```js
// Celsius to Fahrenheit conversion, where point.y is degrees Celsius
format: '{add (multiply point.y (divide 9 5)) 32}℉'
```

When doing math like this, we sometimes end up with too many decimals or other results that we want to run through number or date formatting. In that case, we use a subexpression then apply the formatting as explained above.

```js
// Celsius to Fahrenheit conversion, where point.y is degrees Celsius.
// Format the result with 1 decimal place.
format: '{(add (multiply point.y (divide 9 5)) 32):.1f}℉'
```

[View live demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-datalabels-format-subexpression).

Subexpressions can also be used inside conditions to asses whether a statement is truthy.
```js
// A subexpression inside a condition. Decide plural form.
format: 'The series exists of {points.length} ' +
    '{#if (eq 1 points.length)}point{else}points{/if}.'
```

## Debugging
One of the downsides of working with string formats versus formatter callbacks is the ability to log and debug inside callback. To alleviate that, you can define custom helpers allowing you to inspect the context.

```js
// Custom helper to log the context
Highcharts.Templating.helpers.log = function () {
    console.log(arguments[0].ctx);
};

// Usage
format: '{log}'
```
[View live demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/members/format-log).

## Built-in helpers
* **add**. Add two numbers. For example `{add index 1}` where `index` is a zero-based index from the context. [Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-datalabels-format-subexpression).
* **divide**. Divide the first number with the second. For example `{divide 10 2}` prints 5. Division by zero returns an empty string. [Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-datalabels-format-subexpression).
* **eq**. Returns `true` for loose equality (JavaScript `==`) between the first and second argument. Can be used either as a block helper, `{#eq index 0}First item{/eq}`, or in a subexpression `{#if (eq index 0)}First item{/if}`.
* **#each**. Iterate over an array of items. The context of each child is given as `{this}` in the block body. Additional variables in the block body are `@index`, `@first` and `@last`. Example `{#each points}{@index}) {name}, {#if @last}and {/if}`. [Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/tooltip/format-shared).
* **ge**. Greater than or equal, JavaScript `>=`. Doubles as block helper and subexpression.
* **gt**. Greater than, JavaScript `>`. Doubles as block helper and subexpression.
* **#if**. Conditional block helper. `{#if point.isNull}The point is null{else}The value is {point.y}{/if}`.
* **le**. Less than or equal, JavaScript `<=`. Doubles as block helper and subexpression.
* **lt**. Less than, JavaScript `<`. Doubles as block helper and subexpression.
* **multiply**. Multiply two numbers. For example `{multiply value 1000}`. [Demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-datalabels-format-subexpression).
* **ne**. Not equal, JavaScript `!=`. Doubles as block helper and subexpression.
* **subtract**. Subtract the second number from the first. Example `{subtract 5 2}` prints 3.
* **#unless**. The inverse of `#if`. `{#unless point.isNull}The value is {point.y}{/unless}`.

## Limitations
The templating system only works on the context that is passed in to each item. For data label, the context is the point, for tooltip formats the context holds the series, points, suggested header, for axis labels it holds the axis value etc. In most of these cases the context holds deep access to DOM elements (for example through `series.chart.container.ownerDocument`), but these properties are not accessible in templates due to XSS filtering. Preventing DOM access is one of the reasons for choosing string formats over formatter callbacks.

In cases where helpers are not sufficient to reach the desired formatting, it is better to preprocess the data set. Use [the custom option](https://api.highcharts.com/highcharts/series.line.custom) for series and points, and access that from the format string.

In the [column-comparison demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/column-comparison), we prepare a lookup object for axis labels and the tooltip, append that to the options on chart level, and access it from the axis and tooltip format strings.


## Deprecated format functions
The accessibility module prior to v11.1 had two advanced functions, `#each()` and `#plural()`. These have been deprecated and replaced in the default language strings by the new `#each` and `#eq`. See [Advanced format strings](https://github.com/highcharts/highcharts/blob/v11.0.0/docs/chart-concepts/labels-and-string-formatting.md#advanced-format-strings) on GitHub for details.


================================================
FILE: docs/chart-concepts/title-and-subtitle.md
================================================
Title and subtitle
==================

The title is by default displayed at the top of the chart, and an optional subtitle can be shown beneath it.

![titleandsubtitle.png](titleandsubtitle.png)

The title and subtitle can be set as shown in the example below.

```js
title: {
    text: 'My custom title'
},
subtitle: {
    text: 'My custom subtitle'
}
```

By default, since version 12, the title and subtitle have adaptive alignment to best fit the length of the text and the width of the chart. The following rules apply:
* The title is aligned to the center for short text.
* If the title is about to overflow, it is scaled down to fit, until the limit set in the `title.minScale` option. It defaults to 0.67, which is the scale when the title has the same font size as the subtitle.
* If the title still doesn't fit after scaling down, it is wrapped into multiple lines. Now the text is left-aligned for a cleaner look.
* The subtitle by default (and dynamically) applies the same alignment as the main title.

All of these rules can be overridden by explicitly setting the title or subtitle `align` property, or setting the `title.minScale`, for example to 1 to disallow scaling down.

The title and subtitle can also be moved around by the default attributes of the title and subtitle options (`align`, `float`, `margin`, `verticalAlign`, `x`, `y`). For all available options, see [options.title](https://api.highcharts.com/highcharts/title) and [options.subtitle](https://api.highcharts.com/highcharts/subtitle).

Titles can be modified dynamically after render time by the [Chart.setTitle](https://api.highcharts.com/class-reference/Highcharts.Chart#setTitle) method.



================================================
FILE: docs/chart-concepts/tooltip.md
================================================
Tooltip
=======

The tooltip appears when hovering over a point in a series. By default the tooltip shows the values of the point and the name of the series. For the full set of options available for the tooltip, see [the API reference](https://api.highcharts.com/highcharts/tooltip).

![tooltip.png](tooltip.png)

Appearance
----------

 The following code example shows the most common appearance options for tooltip:

```javascript
tooltip: {
    backgroundColor: '#FCFFC5',
    borderColor: 'black',
    borderRadius: 10,
    borderWidth: 3
}
```

The background color can also be set to a gradient, see [an example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/tooltip/backgroundcolor-gradient/). Text properties can be set using the [style](https://api.highcharts.com/highcharts/tooltip.style) option.

Alternatively, the tooltip can be styled with CSS by enabling [styled mode](https://www.highcharts.com/docs/chart-design-and-style/style-by-css):

```css
.highcharts-tooltip-box {
    fill: #FCFFC5;
    stroke: black;
    stroke-width: 3;
}
```

**Note:** Since the tooltip content is rendered as SVG by default, you have to specify SVG properties such as `fill` and `stroke` in CSS.

Tooltip formatting
------------------

The tooltip's content is rendered from a subset of HTML that can be altered in a number of ways, all in all giving the implementer full control over the content. In addition to options on the [tooltip](https://api.highcharts.com/highcharts/tooltip) configuration object, you can set the options for how each series should be represented in the tooltip by [series.tooltip](https://api.highcharts.com/highcharts/plotOptions.series.tooltip). 

*   The header part of the tooltip can be altered using the [tooltip.headerFormat](https://api.highcharts.com/highcharts/tooltip.headerFormat). In a shared tooltip, the first series' headerFormat is used.
*   The listing of each series is given in the [tooltip.pointFormat](https://api.highcharts.com/highcharts/tooltip.pointFormat) option, or an individual pointFormat for each series. 
*   The footer part can be set in the [tooltip.footerFormat](https://api.highcharts.com/highcharts/tooltip.footerFormat) option.
*   All the options above can be overridden by the [tooltip.formatter](https://api.highcharts.com/highcharts/tooltip.formatter) callback for programmatic control.

By default the tooltip only allows a subset of HTML because the HTML is parsed and rendered using SVG. By setting the [useHTML](https://api.highcharts.com/highcharts/tooltip.useHTML) option to true, the renderer switches to full HTML, which allows for instance table layouts or images inside the tooltip.

```js
tooltip: {
    format: 'The value for <b>{x}</b> is <b>{y}</b>, in series {series.name}'
}
```

For more info about formatting see [Labels and string
formatting](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)

Positioning
-----------
Highcharts offers several options to tailor tooltip positioning to your needs,
improving both functionality and design.

* **Shared** tooltips are great for charts with multiple series. A single tooltip
displays information for all series at a specific x-axis value, reducing clutter
and making comparisons easier. See
[tooltip.shared](https://api.highcharts.com/highcharts/tooltip.shared).
* **Split** tooltips display separate tooltips for each series point, which can
  be useful when detailed information for each data point is needed. See
  [tooltip.split](https://api.highcharts.com/highcharts/tooltip.split).
* **Fixed** tooltips (since v12.2) display the tooltips in a fixed position on
  the chart - by default the top left corner of the data pane. Fixed tooltips
  can be combined with `shared` or `split`. See
  [tooltip.fixed](https://api.highcharts.com/highcharts/tooltip.fixed).

Crosshairs
----------

Crosshairs display a line connecting the points with their corresponding axis. Crosshairs are disabled by default in Highcharts, but enabled by default in Highcharts Stock. See the full set of options for [crosshairs](https://api.highcharts.com/highcharts/xAxis.crosshair).

![crosshairs.png](crosshairs.png)

Crosshairs can be enabled for the x-axis, y-axis or both:

```js
// Enable for x-axis
xAxis: {
    crosshair: true
}

// Enable for y-axis
yAxis: {
    crosshair: true
}
```



================================================
FILE: docs/chart-concepts/understanding-highcharts.md
================================================
Understanding Highcharts
========================

To understand how Highcharts works, it is important to understand the various parts, or concepts, of a chart.

The image below describes the main concepts in a chart.

![understanding_highcharts.png](understanding_highcharts.png)

Title
-----

Text that describes the chart. Usually located at the top of the chart.

See [Title and subtitle](https://highcharts.com/docs/chart-concepts/title-and-subtitle) for more information.

Series
------

One or more series of data presented on the chart.

See [Series](https://highcharts.com/docs/chart-concepts/series) for more information.

Tooltip
-------

When hovering over a series or a point on the chart, you can get a tooltip that describes the values in that particular part of the chart.

See [Tooltip](https://highcharts.com/docs/chart-concepts/tooltip) for more information.

Legend
------

The legend shows the data series in the chart and allows you to enable and disable one or more series.

See [Legend](https://highcharts.com/docs/chart-concepts/legend) for more information.

Axes
----

Most charts, like the typical cartesian line chart and the column chart, have two axes to measure and categorize data: a vertical axis (y-axis) and a horizontal axis (x-axis). 3D charts have a third axis, a depth axis (z-axis). Polar charts, also known as radar charts, only have one axis that spans around the perimeter of the chart. Gauge charts, also known as speedometer charts, can even have a single value axis. Pie charts, however, have no axes.

See [Axes](https://highcharts.com/docs/chart-concepts/axes) for more information.



================================================
FILE: docs/chart-concepts/zooming.md
================================================
Zooming
=======

### Highcharts Core

Zooming in Highcharts can be enabled on the X axes or Y axes separately. The
[chart.zooming.type](https://api.highcharts.com/highcharts/chart.zooming.type)
option is set to either `"x"`, `"y"` or `"xy"`.

With a mouse pointer, the zooming is performed by dragging out a rectangle in
the chart. If the
[chart.panKey](https://api.highcharts.com/highcharts/chart.panKey)
is set, the user can press that key and drag the mouse in order to pan.
Otherwise, the user can't pan the zoomed area but has to zoom out then in again
on a new area.

When zooming, a button appears that lets the user zoom out. Programmatically,
the _Chart.zoomOut_ function can be used to the same effect.

On touch devices, the user can zoom by pinching in the chart area. On these
devices, the user may also move the zoomed area by panning with one finger
across the chart.

The Y axes do not scale to zoomed areas by default like X axes do. This
behavior will become active, when the axis options
[startOnTick](https://api.highcharts.com/highcharts/yAxis.startOnTick)
and
[endOnTick](https://api.highcharts.com/highcharts/yAxis.endOnTick)
are set to `false`.

#### Mouse wheel zooming
Mouse wheel zooming is available through the
[zooming.mouseWheel](https://api.highcharts.com/highcharts/chart.zooming.mouseWheel)
option set (since v11.1). It requires a [separate module
file](https://code.highcharts.com/modules/mouse-wheel-zoom.js) for Highcharts Core,
but is bundled in Highcharts Stock.

#### Non-cartesian zooming
Zooming is also available for non-cartesian series, such as pie, treegraph,
sankey amongst others (since v12.3). To enable zooming for non-cartesian series,
you need to include an [additional module
file](https://code.highcharts.com/modules/non-cartesian-zoom.js). The panning
and zooming behavior for non-cartesian series mirrors that of cartesian series,
with support for mouse drag, touch gestures, and mouse wheel zooming (when
enabled). The zoom rectangle in non-cartesian zooming has a fixed aspect ratio
that matches the chart's width-to-height ratio, as this ensures consistent and
meaningful zoom behavior for these types of series.

### Highcharts Stock

In Highcharts Stock, we also have the Navigator, Range Selector, and Scrollbar to ease
navigation, so zooming is disabled by default. Instead, panning is enabled so
that moving the zoomed area is easier. 

On touch devices, both zooming and panning are enabled through the
[chart.zooming.pinchType](https://api.highcharts.com/highstock/chart.zooming.pinchType)
option, which defaults to `"x"`.

[Mouse wheel zooming](https://api.highcharts.com/highcharts/chart.zooming.mouseWheel)
is enabled in Highcharts Stock by default since v11.1.


